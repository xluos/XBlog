/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Article: ArticleObject
      Classify: ClassifyObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ArticleConnection: ArticleConnectionObject
      ArticleEdge: ArticleEdgeObject
      AggregateArticle: AggregateArticleObject
      ClassifyConnection: ClassifyConnectionObject
      ClassifyEdge: ClassifyEdgeObject
      AggregateClassify: AggregateClassifyObject
      Tags: TagsObject
      TagsConnection: TagsConnectionObject
      TagsEdge: TagsEdgeObject
      AggregateTags: AggregateTagsObject
      Discuss: DiscussObject
      DiscussConnection: DiscussConnectionObject
      DiscussEdge: DiscussEdgeObject
      AggregateDiscuss: AggregateDiscussObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ArticleSubscriptionPayload: ArticleSubscriptionPayloadObject
      ArticlePreviousValues: ArticlePreviousValuesObject
      ClassifySubscriptionPayload: ClassifySubscriptionPayloadObject
      ClassifyPreviousValues: ClassifyPreviousValuesObject
      TagsSubscriptionPayload: TagsSubscriptionPayloadObject
      TagsPreviousValues: TagsPreviousValuesObject
      DiscussSubscriptionPayload: DiscussSubscriptionPayloadObject
      DiscussPreviousValues: DiscussPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Article: ArticleFieldDetails
      Classify: ClassifyFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ArticleConnection: ArticleConnectionFieldDetails
      ArticleEdge: ArticleEdgeFieldDetails
      AggregateArticle: AggregateArticleFieldDetails
      ClassifyConnection: ClassifyConnectionFieldDetails
      ClassifyEdge: ClassifyEdgeFieldDetails
      AggregateClassify: AggregateClassifyFieldDetails
      Tags: TagsFieldDetails
      TagsConnection: TagsConnectionFieldDetails
      TagsEdge: TagsEdgeFieldDetails
      AggregateTags: AggregateTagsFieldDetails
      Discuss: DiscussFieldDetails
      DiscussConnection: DiscussConnectionFieldDetails
      DiscussEdge: DiscussEdgeFieldDetails
      AggregateDiscuss: AggregateDiscussFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ArticleSubscriptionPayload: ArticleSubscriptionPayloadFieldDetails
      ArticlePreviousValues: ArticlePreviousValuesFieldDetails
      ClassifySubscriptionPayload: ClassifySubscriptionPayloadFieldDetails
      ClassifyPreviousValues: ClassifyPreviousValuesFieldDetails
      TagsSubscriptionPayload: TagsSubscriptionPayloadFieldDetails
      TagsPreviousValues: TagsPreviousValuesFieldDetails
      DiscussSubscriptionPayload: DiscussSubscriptionPayloadFieldDetails
      DiscussPreviousValues: DiscussPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      ArticleWhereInput: ArticleWhereInputInputObject
      ClassifyWhereInput: ClassifyWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      ArticleWhereUniqueInput: ArticleWhereUniqueInputInputObject
      ClassifyWhereUniqueInput: ClassifyWhereUniqueInputInputObject
      TagsWhereUniqueInput: TagsWhereUniqueInputInputObject
      TagsWhereInput: TagsWhereInputInputObject
      DiscussWhereUniqueInput: DiscussWhereUniqueInputInputObject
      DiscussWhereInput: DiscussWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      ArticleCreateManyInput: ArticleCreateManyInputInputObject
      ArticleCreateInput: ArticleCreateInputInputObject
      ClassifyCreateOneInput: ClassifyCreateOneInputInputObject
      ClassifyCreateInput: ClassifyCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      ArticleUpdateManyInput: ArticleUpdateManyInputInputObject
      ArticleUpdateWithWhereUniqueNestedInput: ArticleUpdateWithWhereUniqueNestedInputInputObject
      ArticleUpdateDataInput: ArticleUpdateDataInputInputObject
      ClassifyUpdateOneRequiredInput: ClassifyUpdateOneRequiredInputInputObject
      ClassifyUpdateDataInput: ClassifyUpdateDataInputInputObject
      ClassifyUpsertNestedInput: ClassifyUpsertNestedInputInputObject
      ArticleUpsertWithWhereUniqueNestedInput: ArticleUpsertWithWhereUniqueNestedInputInputObject
      ArticleScalarWhereInput: ArticleScalarWhereInputInputObject
      ArticleUpdateManyWithWhereNestedInput: ArticleUpdateManyWithWhereNestedInputInputObject
      ArticleUpdateManyDataInput: ArticleUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ArticleUpdateInput: ArticleUpdateInputInputObject
      ArticleUpdateManyMutationInput: ArticleUpdateManyMutationInputInputObject
      ClassifyUpdateInput: ClassifyUpdateInputInputObject
      ClassifyUpdateManyMutationInput: ClassifyUpdateManyMutationInputInputObject
      TagsCreateInput: TagsCreateInputInputObject
      TagsUpdateInput: TagsUpdateInputInputObject
      TagsUpdateManyMutationInput: TagsUpdateManyMutationInputInputObject
      DiscussCreateInput: DiscussCreateInputInputObject
      DiscussUpdateInput: DiscussUpdateInputInputObject
      DiscussUpdateManyMutationInput: DiscussUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ArticleSubscriptionWhereInput: ArticleSubscriptionWhereInputInputObject
      ClassifySubscriptionWhereInput: ClassifySubscriptionWhereInputInputObject
      TagsSubscriptionWhereInput: TagsSubscriptionWhereInputInputObject
      DiscussSubscriptionWhereInput: DiscussSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ArticleTypeEnum: ArticleTypeEnumValues,
    ArticleOrderByInput: ArticleOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    ClassifyOrderByInput: ClassifyOrderByInputValues,
    TagsOrderByInput: TagsOrderByInputValues,
    DiscussOrderByInput: DiscussOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'article', args?: QueryArticleArgs[] | false, alias?: string  } 
  | { name: 'articles', args?: QueryArticlesArgs[] | false, alias?: string  } 
  | { name: 'articlesConnection', args?: QueryArticlesConnectionArgs[] | false, alias?: string  } 
  | { name: 'classify', args?: QueryClassifyArgs[] | false, alias?: string  } 
  | { name: 'classifies', args?: QueryClassifiesArgs[] | false, alias?: string  } 
  | { name: 'classifiesConnection', args?: QueryClassifiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'tags', args?: QueryTagsArgs[] | false, alias?: string  } 
  | { name: 'tagses', args?: QueryTagsesArgs[] | false, alias?: string  } 
  | { name: 'tagsesConnection', args?: QueryTagsesConnectionArgs[] | false, alias?: string  } 
  | { name: 'discuss', args?: QueryDiscussArgs[] | false, alias?: string  } 
  | { name: 'discusses', args?: QueryDiscussesArgs[] | false, alias?: string  } 
  | { name: 'discussesConnection', args?: QueryDiscussesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'article'
  | 'articles'
  | 'articlesConnection'
  | 'classify'
  | 'classifies'
  | 'classifiesConnection'
  | 'tags'
  | 'tagses'
  | 'tagsesConnection'
  | 'discuss'
  | 'discusses'
  | 'discussesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryArticleArgs =
  | 'where'
type QueryArticlesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryArticlesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryClassifyArgs =
  | 'where'
type QueryClassifiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryClassifiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTagsArgs =
  | 'where'
type QueryTagsesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTagsesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDiscussArgs =
  | 'where'
type QueryDiscussesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDiscussesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  article: {
    type: 'Article'
    args: Record<QueryArticleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ArticleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article | null> | prisma.Article | null
  }
  articles: {
    type: 'Article'
    args: Record<QueryArticlesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ArticleWhereInput | null, orderBy?: prisma.ArticleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article[]> | prisma.Article[]
  }
  articlesConnection: {
    type: 'ArticleConnection'
    args: Record<QueryArticlesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ArticleWhereInput | null, orderBy?: prisma.ArticleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ArticleConnection> | prisma.ArticleConnection
  }
  classify: {
    type: 'Classify'
    args: Record<QueryClassifyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ClassifyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify | null> | prisma.Classify | null
  }
  classifies: {
    type: 'Classify'
    args: Record<QueryClassifiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ClassifyWhereInput | null, orderBy?: prisma.ClassifyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify[]> | prisma.Classify[]
  }
  classifiesConnection: {
    type: 'ClassifyConnection'
    args: Record<QueryClassifiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ClassifyWhereInput | null, orderBy?: prisma.ClassifyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClassifyConnection> | prisma.ClassifyConnection
  }
  tags: {
    type: 'Tags'
    args: Record<QueryTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TagsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags | null> | prisma.Tags | null
  }
  tagses: {
    type: 'Tags'
    args: Record<QueryTagsesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TagsWhereInput | null, orderBy?: prisma.TagsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags[]> | prisma.Tags[]
  }
  tagsesConnection: {
    type: 'TagsConnection'
    args: Record<QueryTagsesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TagsWhereInput | null, orderBy?: prisma.TagsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagsConnection> | prisma.TagsConnection
  }
  discuss: {
    type: 'Discuss'
    args: Record<QueryDiscussArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DiscussWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss | null> | prisma.Discuss | null
  }
  discusses: {
    type: 'Discuss'
    args: Record<QueryDiscussesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DiscussWhereInput | null, orderBy?: prisma.DiscussOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss[]> | prisma.Discuss[]
  }
  discussesConnection: {
    type: 'DiscussConnection'
    args: Record<QueryDiscussesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DiscussWhereInput | null, orderBy?: prisma.DiscussOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiscussConnection> | prisma.DiscussConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'articles', args?: UserArticlesArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'email'
  | 'password'
  | 'articles'


type UserArticlesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  articles: {
    type: 'Article'
    args: Record<UserArticlesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ArticleWhereInput | null, orderBy?: prisma.ArticleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article[]> | prisma.Article[]
  }
}
  

// Types for Article

type ArticleObject =
  | ArticleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'profile', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'contentRaw', args?: [] | false, alias?: string  } 
  | { name: 'tags', args?: [] | false, alias?: string  } 
  | { name: 'classify', args?: [] | false, alias?: string  } 

type ArticleFields =
  | 'id'
  | 'type'
  | 'profile'
  | 'title'
  | 'content'
  | 'contentRaw'
  | 'tags'
  | 'classify'



  

export interface ArticleFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'ArticleTypeEnum'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Article">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ArticleTypeEnum | null> | prisma.ArticleTypeEnum | null
  }
  profile: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contentRaw: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tags: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  classify: {
    type: 'Classify'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Article">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify> | prisma.Classify
  }
}
  

// Types for Classify

type ClassifyObject =
  | ClassifyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'parent', args?: [] | false, alias?: string  } 
  | { name: 'parentList', args?: [] | false, alias?: string  } 
  | { name: 'linkCount', args?: [] | false, alias?: string  } 

type ClassifyFields =
  | 'id'
  | 'name'
  | 'parent'
  | 'parentList'
  | 'linkCount'



  

export interface ClassifyFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  parent: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  parentList: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  linkCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ArticleConnection

type ArticleConnectionObject =
  | ArticleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ArticleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ArticleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ArticleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ArticleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ArticleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ArticleEdge[]> | prisma.ArticleEdge[]
  }
  aggregate: {
    type: 'AggregateArticle'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ArticleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateArticle> | prisma.AggregateArticle
  }
}
  

// Types for ArticleEdge

type ArticleEdgeObject =
  | ArticleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ArticleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ArticleEdgeFieldDetails {
  node: {
    type: 'Article'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ArticleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article> | prisma.Article
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateArticle

type AggregateArticleObject =
  | AggregateArticleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateArticleFields =
  | 'count'



  

export interface AggregateArticleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ClassifyConnection

type ClassifyConnectionObject =
  | ClassifyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ClassifyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ClassifyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClassifyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ClassifyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ClassifyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClassifyEdge[]> | prisma.ClassifyEdge[]
  }
  aggregate: {
    type: 'AggregateClassify'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClassifyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateClassify> | prisma.AggregateClassify
  }
}
  

// Types for ClassifyEdge

type ClassifyEdgeObject =
  | ClassifyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ClassifyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ClassifyEdgeFieldDetails {
  node: {
    type: 'Classify'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClassifyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify> | prisma.Classify
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateClassify

type AggregateClassifyObject =
  | AggregateClassifyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateClassifyFields =
  | 'count'



  

export interface AggregateClassifyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Tags

type TagsObject =
  | TagsFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'linkCount', args?: [] | false, alias?: string  } 

type TagsFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'linkCount'



  

export interface TagsFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  linkCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TagsConnection

type TagsConnectionObject =
  | TagsConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TagsConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TagsConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TagsEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TagsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagsEdge[]> | prisma.TagsEdge[]
  }
  aggregate: {
    type: 'AggregateTags'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTags> | prisma.AggregateTags
  }
}
  

// Types for TagsEdge

type TagsEdgeObject =
  | TagsEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TagsEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TagsEdgeFieldDetails {
  node: {
    type: 'Tags'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagsEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags> | prisma.Tags
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTags

type AggregateTagsObject =
  | AggregateTagsFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTagsFields =
  | 'count'



  

export interface AggregateTagsFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Discuss

type DiscussObject =
  | DiscussFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'articleId', args?: [] | false, alias?: string  } 
  | { name: 'contentRaw', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'userName', args?: [] | false, alias?: string  } 
  | { name: 'userProfile', args?: [] | false, alias?: string  } 
  | { name: 'userEmail', args?: [] | false, alias?: string  } 
  | { name: 'parentId', args?: [] | false, alias?: string  } 

type DiscussFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'articleId'
  | 'contentRaw'
  | 'content'
  | 'userName'
  | 'userProfile'
  | 'userEmail'
  | 'parentId'



  

export interface DiscussFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  articleId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contentRaw: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  userProfile: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  userEmail: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  parentId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for DiscussConnection

type DiscussConnectionObject =
  | DiscussConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DiscussConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DiscussConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiscussConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DiscussEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DiscussConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiscussEdge[]> | prisma.DiscussEdge[]
  }
  aggregate: {
    type: 'AggregateDiscuss'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiscussConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDiscuss> | prisma.AggregateDiscuss
  }
}
  

// Types for DiscussEdge

type DiscussEdgeObject =
  | DiscussEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DiscussEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DiscussEdgeFieldDetails {
  node: {
    type: 'Discuss'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiscussEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss> | prisma.Discuss
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDiscuss

type AggregateDiscussObject =
  | AggregateDiscussFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDiscussFields =
  | 'count'



  

export interface AggregateDiscussFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createArticle', args?: MutationCreateArticleArgs[] | false, alias?: string  } 
  | { name: 'updateArticle', args?: MutationUpdateArticleArgs[] | false, alias?: string  } 
  | { name: 'updateManyArticles', args?: MutationUpdateManyArticlesArgs[] | false, alias?: string  } 
  | { name: 'upsertArticle', args?: MutationUpsertArticleArgs[] | false, alias?: string  } 
  | { name: 'deleteArticle', args?: MutationDeleteArticleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyArticles', args?: MutationDeleteManyArticlesArgs[] | false, alias?: string  } 
  | { name: 'createClassify', args?: MutationCreateClassifyArgs[] | false, alias?: string  } 
  | { name: 'updateClassify', args?: MutationUpdateClassifyArgs[] | false, alias?: string  } 
  | { name: 'updateManyClassifies', args?: MutationUpdateManyClassifiesArgs[] | false, alias?: string  } 
  | { name: 'upsertClassify', args?: MutationUpsertClassifyArgs[] | false, alias?: string  } 
  | { name: 'deleteClassify', args?: MutationDeleteClassifyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyClassifies', args?: MutationDeleteManyClassifiesArgs[] | false, alias?: string  } 
  | { name: 'createTags', args?: MutationCreateTagsArgs[] | false, alias?: string  } 
  | { name: 'updateTags', args?: MutationUpdateTagsArgs[] | false, alias?: string  } 
  | { name: 'updateManyTagses', args?: MutationUpdateManyTagsesArgs[] | false, alias?: string  } 
  | { name: 'upsertTags', args?: MutationUpsertTagsArgs[] | false, alias?: string  } 
  | { name: 'deleteTags', args?: MutationDeleteTagsArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTagses', args?: MutationDeleteManyTagsesArgs[] | false, alias?: string  } 
  | { name: 'createDiscuss', args?: MutationCreateDiscussArgs[] | false, alias?: string  } 
  | { name: 'updateDiscuss', args?: MutationUpdateDiscussArgs[] | false, alias?: string  } 
  | { name: 'updateManyDiscusses', args?: MutationUpdateManyDiscussesArgs[] | false, alias?: string  } 
  | { name: 'upsertDiscuss', args?: MutationUpsertDiscussArgs[] | false, alias?: string  } 
  | { name: 'deleteDiscuss', args?: MutationDeleteDiscussArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDiscusses', args?: MutationDeleteManyDiscussesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createArticle'
  | 'updateArticle'
  | 'updateManyArticles'
  | 'upsertArticle'
  | 'deleteArticle'
  | 'deleteManyArticles'
  | 'createClassify'
  | 'updateClassify'
  | 'updateManyClassifies'
  | 'upsertClassify'
  | 'deleteClassify'
  | 'deleteManyClassifies'
  | 'createTags'
  | 'updateTags'
  | 'updateManyTagses'
  | 'upsertTags'
  | 'deleteTags'
  | 'deleteManyTagses'
  | 'createDiscuss'
  | 'updateDiscuss'
  | 'updateManyDiscusses'
  | 'upsertDiscuss'
  | 'deleteDiscuss'
  | 'deleteManyDiscusses'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateArticleArgs =
  | 'data'
type MutationUpdateArticleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyArticlesArgs =
  | 'data'
  | 'where'
type MutationUpsertArticleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteArticleArgs =
  | 'where'
type MutationDeleteManyArticlesArgs =
  | 'where'
type MutationCreateClassifyArgs =
  | 'data'
type MutationUpdateClassifyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyClassifiesArgs =
  | 'data'
  | 'where'
type MutationUpsertClassifyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteClassifyArgs =
  | 'where'
type MutationDeleteManyClassifiesArgs =
  | 'where'
type MutationCreateTagsArgs =
  | 'data'
type MutationUpdateTagsArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTagsesArgs =
  | 'data'
  | 'where'
type MutationUpsertTagsArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTagsArgs =
  | 'where'
type MutationDeleteManyTagsesArgs =
  | 'where'
type MutationCreateDiscussArgs =
  | 'data'
type MutationUpdateDiscussArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDiscussesArgs =
  | 'data'
  | 'where'
type MutationUpsertDiscussArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDiscussArgs =
  | 'where'
type MutationDeleteManyDiscussesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createArticle: {
    type: 'Article'
    args: Record<MutationCreateArticleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ArticleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article> | prisma.Article
  }
  updateArticle: {
    type: 'Article'
    args: Record<MutationUpdateArticleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ArticleUpdateInput, where: ArticleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article | null> | prisma.Article | null
  }
  updateManyArticles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyArticlesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ArticleUpdateManyMutationInput, where?: ArticleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertArticle: {
    type: 'Article'
    args: Record<MutationUpsertArticleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ArticleWhereUniqueInput, create: ArticleCreateInput, update: ArticleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article> | prisma.Article
  }
  deleteArticle: {
    type: 'Article'
    args: Record<MutationDeleteArticleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ArticleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article | null> | prisma.Article | null
  }
  deleteManyArticles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyArticlesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ArticleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createClassify: {
    type: 'Classify'
    args: Record<MutationCreateClassifyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClassifyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify> | prisma.Classify
  }
  updateClassify: {
    type: 'Classify'
    args: Record<MutationUpdateClassifyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClassifyUpdateInput, where: ClassifyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify | null> | prisma.Classify | null
  }
  updateManyClassifies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyClassifiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ClassifyUpdateManyMutationInput, where?: ClassifyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertClassify: {
    type: 'Classify'
    args: Record<MutationUpsertClassifyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ClassifyWhereUniqueInput, create: ClassifyCreateInput, update: ClassifyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify> | prisma.Classify
  }
  deleteClassify: {
    type: 'Classify'
    args: Record<MutationDeleteClassifyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ClassifyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify | null> | prisma.Classify | null
  }
  deleteManyClassifies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyClassifiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ClassifyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTags: {
    type: 'Tags'
    args: Record<MutationCreateTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagsCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags> | prisma.Tags
  }
  updateTags: {
    type: 'Tags'
    args: Record<MutationUpdateTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagsUpdateInput, where: TagsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags | null> | prisma.Tags | null
  }
  updateManyTagses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTagsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TagsUpdateManyMutationInput, where?: TagsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTags: {
    type: 'Tags'
    args: Record<MutationUpsertTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TagsWhereUniqueInput, create: TagsCreateInput, update: TagsUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags> | prisma.Tags
  }
  deleteTags: {
    type: 'Tags'
    args: Record<MutationDeleteTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TagsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags | null> | prisma.Tags | null
  }
  deleteManyTagses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTagsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TagsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDiscuss: {
    type: 'Discuss'
    args: Record<MutationCreateDiscussArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DiscussCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss> | prisma.Discuss
  }
  updateDiscuss: {
    type: 'Discuss'
    args: Record<MutationUpdateDiscussArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DiscussUpdateInput, where: DiscussWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss | null> | prisma.Discuss | null
  }
  updateManyDiscusses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDiscussesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DiscussUpdateManyMutationInput, where?: DiscussWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDiscuss: {
    type: 'Discuss'
    args: Record<MutationUpsertDiscussArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DiscussWhereUniqueInput, create: DiscussCreateInput, update: DiscussUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss> | prisma.Discuss
  }
  deleteDiscuss: {
    type: 'Discuss'
    args: Record<MutationDeleteDiscussArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DiscussWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss | null> | prisma.Discuss | null
  }
  deleteManyDiscusses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDiscussesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DiscussWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'article', args?: SubscriptionArticleArgs[] | false, alias?: string  } 
  | { name: 'classify', args?: SubscriptionClassifyArgs[] | false, alias?: string  } 
  | { name: 'tags', args?: SubscriptionTagsArgs[] | false, alias?: string  } 
  | { name: 'discuss', args?: SubscriptionDiscussArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'article'
  | 'classify'
  | 'tags'
  | 'discuss'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionArticleArgs =
  | 'where'
type SubscriptionClassifyArgs =
  | 'where'
type SubscriptionTagsArgs =
  | 'where'
type SubscriptionDiscussArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  article: {
    type: 'ArticleSubscriptionPayload'
    args: Record<SubscriptionArticleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ArticleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ArticleSubscriptionPayload | null> | prisma.ArticleSubscriptionPayload | null
  }
  classify: {
    type: 'ClassifySubscriptionPayload'
    args: Record<SubscriptionClassifyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ClassifySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClassifySubscriptionPayload | null> | prisma.ClassifySubscriptionPayload | null
  }
  tags: {
    type: 'TagsSubscriptionPayload'
    args: Record<SubscriptionTagsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TagsSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagsSubscriptionPayload | null> | prisma.TagsSubscriptionPayload | null
  }
  discuss: {
    type: 'DiscussSubscriptionPayload'
    args: Record<SubscriptionDiscussArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DiscussSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiscussSubscriptionPayload | null> | prisma.DiscussSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'email'
  | 'password'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ArticleSubscriptionPayload

type ArticleSubscriptionPayloadObject =
  | ArticleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ArticleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ArticleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ArticleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Article'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ArticleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Article | null> | prisma.Article | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ArticlePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ArticleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ArticlePreviousValues | null> | prisma.ArticlePreviousValues | null
  }
}
  

// Types for ArticlePreviousValues

type ArticlePreviousValuesObject =
  | ArticlePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'profile', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'contentRaw', args?: [] | false, alias?: string  } 
  | { name: 'tags', args?: [] | false, alias?: string  } 

type ArticlePreviousValuesFields =
  | 'id'
  | 'type'
  | 'profile'
  | 'title'
  | 'content'
  | 'contentRaw'
  | 'tags'



  

export interface ArticlePreviousValuesFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'ArticleTypeEnum'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ArticlePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ArticleTypeEnum | null> | prisma.ArticleTypeEnum | null
  }
  profile: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contentRaw: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tags: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ClassifySubscriptionPayload

type ClassifySubscriptionPayloadObject =
  | ClassifySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ClassifySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ClassifySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ClassifySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Classify'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ClassifySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Classify | null> | prisma.Classify | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ClassifyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ClassifySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ClassifyPreviousValues | null> | prisma.ClassifyPreviousValues | null
  }
}
  

// Types for ClassifyPreviousValues

type ClassifyPreviousValuesObject =
  | ClassifyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'parent', args?: [] | false, alias?: string  } 
  | { name: 'parentList', args?: [] | false, alias?: string  } 
  | { name: 'linkCount', args?: [] | false, alias?: string  } 

type ClassifyPreviousValuesFields =
  | 'id'
  | 'name'
  | 'parent'
  | 'parentList'
  | 'linkCount'



  

export interface ClassifyPreviousValuesFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  parent: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  parentList: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  linkCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TagsSubscriptionPayload

type TagsSubscriptionPayloadObject =
  | TagsSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TagsSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TagsSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TagsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Tags'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TagsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tags | null> | prisma.Tags | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TagsPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TagsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TagsPreviousValues | null> | prisma.TagsPreviousValues | null
  }
}
  

// Types for TagsPreviousValues

type TagsPreviousValuesObject =
  | TagsPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'linkCount', args?: [] | false, alias?: string  } 

type TagsPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'linkCount'



  

export interface TagsPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  linkCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for DiscussSubscriptionPayload

type DiscussSubscriptionPayloadObject =
  | DiscussSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DiscussSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DiscussSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiscussSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Discuss'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DiscussSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Discuss | null> | prisma.Discuss | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DiscussPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DiscussSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiscussPreviousValues | null> | prisma.DiscussPreviousValues | null
  }
}
  

// Types for DiscussPreviousValues

type DiscussPreviousValuesObject =
  | DiscussPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'articleId', args?: [] | false, alias?: string  } 
  | { name: 'contentRaw', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'userName', args?: [] | false, alias?: string  } 
  | { name: 'userProfile', args?: [] | false, alias?: string  } 
  | { name: 'userEmail', args?: [] | false, alias?: string  } 
  | { name: 'parentId', args?: [] | false, alias?: string  } 

type DiscussPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'articleId'
  | 'contentRaw'
  | 'content'
  | 'userName'
  | 'userProfile'
  | 'userEmail'
  | 'parentId'



  

export interface DiscussPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  articleId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contentRaw: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  userProfile: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  userEmail: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  parentId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface ArticleWhereInput {
  id?: number | null
  id_not?: number | null
  id_in?: number[]
  id_not_in?: number[]
  id_lt?: number | null
  id_lte?: number | null
  id_gt?: number | null
  id_gte?: number | null
  type?: prisma.ArticleTypeEnum | null
  type_not?: prisma.ArticleTypeEnum | null
  type_in?: prisma.ArticleTypeEnum[]
  type_not_in?: prisma.ArticleTypeEnum[]
  profile?: string | null
  profile_not?: string | null
  profile_in?: string[]
  profile_not_in?: string[]
  profile_lt?: string | null
  profile_lte?: string | null
  profile_gt?: string | null
  profile_gte?: string | null
  profile_contains?: string | null
  profile_not_contains?: string | null
  profile_starts_with?: string | null
  profile_not_starts_with?: string | null
  profile_ends_with?: string | null
  profile_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  contentRaw?: string | null
  contentRaw_not?: string | null
  contentRaw_in?: string[]
  contentRaw_not_in?: string[]
  contentRaw_lt?: string | null
  contentRaw_lte?: string | null
  contentRaw_gt?: string | null
  contentRaw_gte?: string | null
  contentRaw_contains?: string | null
  contentRaw_not_contains?: string | null
  contentRaw_starts_with?: string | null
  contentRaw_not_starts_with?: string | null
  contentRaw_ends_with?: string | null
  contentRaw_not_ends_with?: string | null
  classify?: ClassifyWhereInput | null
  AND?: ArticleWhereInput[]
  OR?: ArticleWhereInput[]
  NOT?: ArticleWhereInput[]
}
export type ArticleWhereInputInputObject =
  | Extract<keyof ArticleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'profile_not', alias?: string  } 
  | { name: 'profile_in', alias?: string  } 
  | { name: 'profile_not_in', alias?: string  } 
  | { name: 'profile_lt', alias?: string  } 
  | { name: 'profile_lte', alias?: string  } 
  | { name: 'profile_gt', alias?: string  } 
  | { name: 'profile_gte', alias?: string  } 
  | { name: 'profile_contains', alias?: string  } 
  | { name: 'profile_not_contains', alias?: string  } 
  | { name: 'profile_starts_with', alias?: string  } 
  | { name: 'profile_not_starts_with', alias?: string  } 
  | { name: 'profile_ends_with', alias?: string  } 
  | { name: 'profile_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'contentRaw_not', alias?: string  } 
  | { name: 'contentRaw_in', alias?: string  } 
  | { name: 'contentRaw_not_in', alias?: string  } 
  | { name: 'contentRaw_lt', alias?: string  } 
  | { name: 'contentRaw_lte', alias?: string  } 
  | { name: 'contentRaw_gt', alias?: string  } 
  | { name: 'contentRaw_gte', alias?: string  } 
  | { name: 'contentRaw_contains', alias?: string  } 
  | { name: 'contentRaw_not_contains', alias?: string  } 
  | { name: 'contentRaw_starts_with', alias?: string  } 
  | { name: 'contentRaw_not_starts_with', alias?: string  } 
  | { name: 'contentRaw_ends_with', alias?: string  } 
  | { name: 'contentRaw_not_ends_with', alias?: string  } 
  | { name: 'classify', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClassifyWhereInput {
  id?: number | null
  id_not?: number | null
  id_in?: number[]
  id_not_in?: number[]
  id_lt?: number | null
  id_lte?: number | null
  id_gt?: number | null
  id_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  parent?: number | null
  parent_not?: number | null
  parent_in?: number[]
  parent_not_in?: number[]
  parent_lt?: number | null
  parent_lte?: number | null
  parent_gt?: number | null
  parent_gte?: number | null
  parentList?: string | null
  parentList_not?: string | null
  parentList_in?: string[]
  parentList_not_in?: string[]
  parentList_lt?: string | null
  parentList_lte?: string | null
  parentList_gt?: string | null
  parentList_gte?: string | null
  parentList_contains?: string | null
  parentList_not_contains?: string | null
  parentList_starts_with?: string | null
  parentList_not_starts_with?: string | null
  parentList_ends_with?: string | null
  parentList_not_ends_with?: string | null
  linkCount?: number | null
  linkCount_not?: number | null
  linkCount_in?: number[]
  linkCount_not_in?: number[]
  linkCount_lt?: number | null
  linkCount_lte?: number | null
  linkCount_gt?: number | null
  linkCount_gte?: number | null
  AND?: ClassifyWhereInput[]
  OR?: ClassifyWhereInput[]
  NOT?: ClassifyWhereInput[]
}
export type ClassifyWhereInputInputObject =
  | Extract<keyof ClassifyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'parent_not', alias?: string  } 
  | { name: 'parent_in', alias?: string  } 
  | { name: 'parent_not_in', alias?: string  } 
  | { name: 'parent_lt', alias?: string  } 
  | { name: 'parent_lte', alias?: string  } 
  | { name: 'parent_gt', alias?: string  } 
  | { name: 'parent_gte', alias?: string  } 
  | { name: 'parentList', alias?: string  } 
  | { name: 'parentList_not', alias?: string  } 
  | { name: 'parentList_in', alias?: string  } 
  | { name: 'parentList_not_in', alias?: string  } 
  | { name: 'parentList_lt', alias?: string  } 
  | { name: 'parentList_lte', alias?: string  } 
  | { name: 'parentList_gt', alias?: string  } 
  | { name: 'parentList_gte', alias?: string  } 
  | { name: 'parentList_contains', alias?: string  } 
  | { name: 'parentList_not_contains', alias?: string  } 
  | { name: 'parentList_starts_with', alias?: string  } 
  | { name: 'parentList_not_starts_with', alias?: string  } 
  | { name: 'parentList_ends_with', alias?: string  } 
  | { name: 'parentList_not_ends_with', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  | { name: 'linkCount_not', alias?: string  } 
  | { name: 'linkCount_in', alias?: string  } 
  | { name: 'linkCount_not_in', alias?: string  } 
  | { name: 'linkCount_lt', alias?: string  } 
  | { name: 'linkCount_lte', alias?: string  } 
  | { name: 'linkCount_gt', alias?: string  } 
  | { name: 'linkCount_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  articles_every?: ArticleWhereInput | null
  articles_some?: ArticleWhereInput | null
  articles_none?: ArticleWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'articles_every', alias?: string  } 
  | { name: 'articles_some', alias?: string  } 
  | { name: 'articles_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ArticleWhereUniqueInput {
  id?: number | null
}
export type ArticleWhereUniqueInputInputObject =
  | Extract<keyof ArticleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ClassifyWhereUniqueInput {
  id?: number | null
}
export type ClassifyWhereUniqueInputInputObject =
  | Extract<keyof ClassifyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TagsWhereUniqueInput {
  id?: string | null
}
export type TagsWhereUniqueInputInputObject =
  | Extract<keyof TagsWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TagsWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  linkCount?: number | null
  linkCount_not?: number | null
  linkCount_in?: number[]
  linkCount_not_in?: number[]
  linkCount_lt?: number | null
  linkCount_lte?: number | null
  linkCount_gt?: number | null
  linkCount_gte?: number | null
  AND?: TagsWhereInput[]
  OR?: TagsWhereInput[]
  NOT?: TagsWhereInput[]
}
export type TagsWhereInputInputObject =
  | Extract<keyof TagsWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  | { name: 'linkCount_not', alias?: string  } 
  | { name: 'linkCount_in', alias?: string  } 
  | { name: 'linkCount_not_in', alias?: string  } 
  | { name: 'linkCount_lt', alias?: string  } 
  | { name: 'linkCount_lte', alias?: string  } 
  | { name: 'linkCount_gt', alias?: string  } 
  | { name: 'linkCount_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DiscussWhereUniqueInput {
  id?: string | null
}
export type DiscussWhereUniqueInputInputObject =
  | Extract<keyof DiscussWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DiscussWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  articleId?: number | null
  articleId_not?: number | null
  articleId_in?: number[]
  articleId_not_in?: number[]
  articleId_lt?: number | null
  articleId_lte?: number | null
  articleId_gt?: number | null
  articleId_gte?: number | null
  contentRaw?: string | null
  contentRaw_not?: string | null
  contentRaw_in?: string[]
  contentRaw_not_in?: string[]
  contentRaw_lt?: string | null
  contentRaw_lte?: string | null
  contentRaw_gt?: string | null
  contentRaw_gte?: string | null
  contentRaw_contains?: string | null
  contentRaw_not_contains?: string | null
  contentRaw_starts_with?: string | null
  contentRaw_not_starts_with?: string | null
  contentRaw_ends_with?: string | null
  contentRaw_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  userName?: string | null
  userName_not?: string | null
  userName_in?: string[]
  userName_not_in?: string[]
  userName_lt?: string | null
  userName_lte?: string | null
  userName_gt?: string | null
  userName_gte?: string | null
  userName_contains?: string | null
  userName_not_contains?: string | null
  userName_starts_with?: string | null
  userName_not_starts_with?: string | null
  userName_ends_with?: string | null
  userName_not_ends_with?: string | null
  userProfile?: string | null
  userProfile_not?: string | null
  userProfile_in?: string[]
  userProfile_not_in?: string[]
  userProfile_lt?: string | null
  userProfile_lte?: string | null
  userProfile_gt?: string | null
  userProfile_gte?: string | null
  userProfile_contains?: string | null
  userProfile_not_contains?: string | null
  userProfile_starts_with?: string | null
  userProfile_not_starts_with?: string | null
  userProfile_ends_with?: string | null
  userProfile_not_ends_with?: string | null
  userEmail?: string | null
  userEmail_not?: string | null
  userEmail_in?: string[]
  userEmail_not_in?: string[]
  userEmail_lt?: string | null
  userEmail_lte?: string | null
  userEmail_gt?: string | null
  userEmail_gte?: string | null
  userEmail_contains?: string | null
  userEmail_not_contains?: string | null
  userEmail_starts_with?: string | null
  userEmail_not_starts_with?: string | null
  userEmail_ends_with?: string | null
  userEmail_not_ends_with?: string | null
  parentId?: string | null
  parentId_not?: string | null
  parentId_in?: string[]
  parentId_not_in?: string[]
  parentId_lt?: string | null
  parentId_lte?: string | null
  parentId_gt?: string | null
  parentId_gte?: string | null
  parentId_contains?: string | null
  parentId_not_contains?: string | null
  parentId_starts_with?: string | null
  parentId_not_starts_with?: string | null
  parentId_ends_with?: string | null
  parentId_not_ends_with?: string | null
  AND?: DiscussWhereInput[]
  OR?: DiscussWhereInput[]
  NOT?: DiscussWhereInput[]
}
export type DiscussWhereInputInputObject =
  | Extract<keyof DiscussWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'articleId', alias?: string  } 
  | { name: 'articleId_not', alias?: string  } 
  | { name: 'articleId_in', alias?: string  } 
  | { name: 'articleId_not_in', alias?: string  } 
  | { name: 'articleId_lt', alias?: string  } 
  | { name: 'articleId_lte', alias?: string  } 
  | { name: 'articleId_gt', alias?: string  } 
  | { name: 'articleId_gte', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'contentRaw_not', alias?: string  } 
  | { name: 'contentRaw_in', alias?: string  } 
  | { name: 'contentRaw_not_in', alias?: string  } 
  | { name: 'contentRaw_lt', alias?: string  } 
  | { name: 'contentRaw_lte', alias?: string  } 
  | { name: 'contentRaw_gt', alias?: string  } 
  | { name: 'contentRaw_gte', alias?: string  } 
  | { name: 'contentRaw_contains', alias?: string  } 
  | { name: 'contentRaw_not_contains', alias?: string  } 
  | { name: 'contentRaw_starts_with', alias?: string  } 
  | { name: 'contentRaw_not_starts_with', alias?: string  } 
  | { name: 'contentRaw_ends_with', alias?: string  } 
  | { name: 'contentRaw_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'userName', alias?: string  } 
  | { name: 'userName_not', alias?: string  } 
  | { name: 'userName_in', alias?: string  } 
  | { name: 'userName_not_in', alias?: string  } 
  | { name: 'userName_lt', alias?: string  } 
  | { name: 'userName_lte', alias?: string  } 
  | { name: 'userName_gt', alias?: string  } 
  | { name: 'userName_gte', alias?: string  } 
  | { name: 'userName_contains', alias?: string  } 
  | { name: 'userName_not_contains', alias?: string  } 
  | { name: 'userName_starts_with', alias?: string  } 
  | { name: 'userName_not_starts_with', alias?: string  } 
  | { name: 'userName_ends_with', alias?: string  } 
  | { name: 'userName_not_ends_with', alias?: string  } 
  | { name: 'userProfile', alias?: string  } 
  | { name: 'userProfile_not', alias?: string  } 
  | { name: 'userProfile_in', alias?: string  } 
  | { name: 'userProfile_not_in', alias?: string  } 
  | { name: 'userProfile_lt', alias?: string  } 
  | { name: 'userProfile_lte', alias?: string  } 
  | { name: 'userProfile_gt', alias?: string  } 
  | { name: 'userProfile_gte', alias?: string  } 
  | { name: 'userProfile_contains', alias?: string  } 
  | { name: 'userProfile_not_contains', alias?: string  } 
  | { name: 'userProfile_starts_with', alias?: string  } 
  | { name: 'userProfile_not_starts_with', alias?: string  } 
  | { name: 'userProfile_ends_with', alias?: string  } 
  | { name: 'userProfile_not_ends_with', alias?: string  } 
  | { name: 'userEmail', alias?: string  } 
  | { name: 'userEmail_not', alias?: string  } 
  | { name: 'userEmail_in', alias?: string  } 
  | { name: 'userEmail_not_in', alias?: string  } 
  | { name: 'userEmail_lt', alias?: string  } 
  | { name: 'userEmail_lte', alias?: string  } 
  | { name: 'userEmail_gt', alias?: string  } 
  | { name: 'userEmail_gte', alias?: string  } 
  | { name: 'userEmail_contains', alias?: string  } 
  | { name: 'userEmail_not_contains', alias?: string  } 
  | { name: 'userEmail_starts_with', alias?: string  } 
  | { name: 'userEmail_not_starts_with', alias?: string  } 
  | { name: 'userEmail_ends_with', alias?: string  } 
  | { name: 'userEmail_not_ends_with', alias?: string  } 
  | { name: 'parentId', alias?: string  } 
  | { name: 'parentId_not', alias?: string  } 
  | { name: 'parentId_in', alias?: string  } 
  | { name: 'parentId_not_in', alias?: string  } 
  | { name: 'parentId_lt', alias?: string  } 
  | { name: 'parentId_lte', alias?: string  } 
  | { name: 'parentId_gt', alias?: string  } 
  | { name: 'parentId_gte', alias?: string  } 
  | { name: 'parentId_contains', alias?: string  } 
  | { name: 'parentId_not_contains', alias?: string  } 
  | { name: 'parentId_starts_with', alias?: string  } 
  | { name: 'parentId_not_starts_with', alias?: string  } 
  | { name: 'parentId_ends_with', alias?: string  } 
  | { name: 'parentId_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  email?: string
  password?: string
  articles?: ArticleCreateManyInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'articles', alias?: string  } 
  
export interface ArticleCreateManyInput {
  create?: ArticleCreateInput[]
  connect?: ArticleWhereUniqueInput[]
}
export type ArticleCreateManyInputInputObject =
  | Extract<keyof ArticleCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ArticleCreateInput {
  type?: prisma.ArticleTypeEnum | null
  profile?: string | null
  title?: string
  content?: string
  contentRaw?: string
  tags?: undefined | null
  classify?: ClassifyCreateOneInput
}
export type ArticleCreateInputInputObject =
  | Extract<keyof ArticleCreateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'classify', alias?: string  } 
  
export interface ClassifyCreateOneInput {
  create?: ClassifyCreateInput | null
  connect?: ClassifyWhereUniqueInput | null
}
export type ClassifyCreateOneInputInputObject =
  | Extract<keyof ClassifyCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ClassifyCreateInput {
  name?: string
  parent?: number | null
  parentList?: string | null
  linkCount?: number | null
}
export type ClassifyCreateInputInputObject =
  | Extract<keyof ClassifyCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'parentList', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  password?: string | null
  articles?: ArticleUpdateManyInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'articles', alias?: string  } 
  
export interface ArticleUpdateManyInput {
  create?: ArticleCreateInput[]
  update?: ArticleUpdateWithWhereUniqueNestedInput[]
  upsert?: ArticleUpsertWithWhereUniqueNestedInput[]
  delete?: ArticleWhereUniqueInput[]
  connect?: ArticleWhereUniqueInput[]
  set?: ArticleWhereUniqueInput[]
  disconnect?: ArticleWhereUniqueInput[]
  deleteMany?: ArticleScalarWhereInput[]
  updateMany?: ArticleUpdateManyWithWhereNestedInput[]
}
export type ArticleUpdateManyInputInputObject =
  | Extract<keyof ArticleUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ArticleUpdateWithWhereUniqueNestedInput {
  where?: ArticleWhereUniqueInput
  data?: ArticleUpdateDataInput
}
export type ArticleUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ArticleUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ArticleUpdateDataInput {
  type?: prisma.ArticleTypeEnum | null
  profile?: string | null
  title?: string | null
  content?: string | null
  contentRaw?: string | null
  tags?: undefined | null
  classify?: ClassifyUpdateOneRequiredInput | null
}
export type ArticleUpdateDataInputInputObject =
  | Extract<keyof ArticleUpdateDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'classify', alias?: string  } 
  
export interface ClassifyUpdateOneRequiredInput {
  create?: ClassifyCreateInput | null
  update?: ClassifyUpdateDataInput | null
  upsert?: ClassifyUpsertNestedInput | null
  connect?: ClassifyWhereUniqueInput | null
}
export type ClassifyUpdateOneRequiredInputInputObject =
  | Extract<keyof ClassifyUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ClassifyUpdateDataInput {
  name?: string | null
  parent?: number | null
  parentList?: string | null
  linkCount?: number | null
}
export type ClassifyUpdateDataInputInputObject =
  | Extract<keyof ClassifyUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'parentList', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  
export interface ClassifyUpsertNestedInput {
  update?: ClassifyUpdateDataInput
  create?: ClassifyCreateInput
}
export type ClassifyUpsertNestedInputInputObject =
  | Extract<keyof ClassifyUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ArticleUpsertWithWhereUniqueNestedInput {
  where?: ArticleWhereUniqueInput
  update?: ArticleUpdateDataInput
  create?: ArticleCreateInput
}
export type ArticleUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ArticleUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ArticleScalarWhereInput {
  id?: number | null
  id_not?: number | null
  id_in?: number[]
  id_not_in?: number[]
  id_lt?: number | null
  id_lte?: number | null
  id_gt?: number | null
  id_gte?: number | null
  type?: prisma.ArticleTypeEnum | null
  type_not?: prisma.ArticleTypeEnum | null
  type_in?: prisma.ArticleTypeEnum[]
  type_not_in?: prisma.ArticleTypeEnum[]
  profile?: string | null
  profile_not?: string | null
  profile_in?: string[]
  profile_not_in?: string[]
  profile_lt?: string | null
  profile_lte?: string | null
  profile_gt?: string | null
  profile_gte?: string | null
  profile_contains?: string | null
  profile_not_contains?: string | null
  profile_starts_with?: string | null
  profile_not_starts_with?: string | null
  profile_ends_with?: string | null
  profile_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  contentRaw?: string | null
  contentRaw_not?: string | null
  contentRaw_in?: string[]
  contentRaw_not_in?: string[]
  contentRaw_lt?: string | null
  contentRaw_lte?: string | null
  contentRaw_gt?: string | null
  contentRaw_gte?: string | null
  contentRaw_contains?: string | null
  contentRaw_not_contains?: string | null
  contentRaw_starts_with?: string | null
  contentRaw_not_starts_with?: string | null
  contentRaw_ends_with?: string | null
  contentRaw_not_ends_with?: string | null
  AND?: ArticleScalarWhereInput[]
  OR?: ArticleScalarWhereInput[]
  NOT?: ArticleScalarWhereInput[]
}
export type ArticleScalarWhereInputInputObject =
  | Extract<keyof ArticleScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'profile_not', alias?: string  } 
  | { name: 'profile_in', alias?: string  } 
  | { name: 'profile_not_in', alias?: string  } 
  | { name: 'profile_lt', alias?: string  } 
  | { name: 'profile_lte', alias?: string  } 
  | { name: 'profile_gt', alias?: string  } 
  | { name: 'profile_gte', alias?: string  } 
  | { name: 'profile_contains', alias?: string  } 
  | { name: 'profile_not_contains', alias?: string  } 
  | { name: 'profile_starts_with', alias?: string  } 
  | { name: 'profile_not_starts_with', alias?: string  } 
  | { name: 'profile_ends_with', alias?: string  } 
  | { name: 'profile_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'contentRaw_not', alias?: string  } 
  | { name: 'contentRaw_in', alias?: string  } 
  | { name: 'contentRaw_not_in', alias?: string  } 
  | { name: 'contentRaw_lt', alias?: string  } 
  | { name: 'contentRaw_lte', alias?: string  } 
  | { name: 'contentRaw_gt', alias?: string  } 
  | { name: 'contentRaw_gte', alias?: string  } 
  | { name: 'contentRaw_contains', alias?: string  } 
  | { name: 'contentRaw_not_contains', alias?: string  } 
  | { name: 'contentRaw_starts_with', alias?: string  } 
  | { name: 'contentRaw_not_starts_with', alias?: string  } 
  | { name: 'contentRaw_ends_with', alias?: string  } 
  | { name: 'contentRaw_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ArticleUpdateManyWithWhereNestedInput {
  where?: ArticleScalarWhereInput
  data?: ArticleUpdateManyDataInput
}
export type ArticleUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ArticleUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ArticleUpdateManyDataInput {
  type?: prisma.ArticleTypeEnum | null
  profile?: string | null
  title?: string | null
  content?: string | null
  contentRaw?: string | null
  tags?: undefined | null
}
export type ArticleUpdateManyDataInputInputObject =
  | Extract<keyof ArticleUpdateManyDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface ArticleUpdateInput {
  type?: prisma.ArticleTypeEnum | null
  profile?: string | null
  title?: string | null
  content?: string | null
  contentRaw?: string | null
  tags?: undefined | null
  classify?: ClassifyUpdateOneRequiredInput | null
}
export type ArticleUpdateInputInputObject =
  | Extract<keyof ArticleUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  | { name: 'classify', alias?: string  } 
  
export interface ArticleUpdateManyMutationInput {
  type?: prisma.ArticleTypeEnum | null
  profile?: string | null
  title?: string | null
  content?: string | null
  contentRaw?: string | null
  tags?: undefined | null
}
export type ArticleUpdateManyMutationInputInputObject =
  | Extract<keyof ArticleUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'profile', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'tags', alias?: string  } 
  
export interface ClassifyUpdateInput {
  name?: string | null
  parent?: number | null
  parentList?: string | null
  linkCount?: number | null
}
export type ClassifyUpdateInputInputObject =
  | Extract<keyof ClassifyUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'parentList', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  
export interface ClassifyUpdateManyMutationInput {
  name?: string | null
  parent?: number | null
  parentList?: string | null
  linkCount?: number | null
}
export type ClassifyUpdateManyMutationInputInputObject =
  | Extract<keyof ClassifyUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'parentList', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  
export interface TagsCreateInput {
  id?: string | null
  name?: string
  linkCount?: number | null
}
export type TagsCreateInputInputObject =
  | Extract<keyof TagsCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  
export interface TagsUpdateInput {
  name?: string | null
  linkCount?: number | null
}
export type TagsUpdateInputInputObject =
  | Extract<keyof TagsUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  
export interface TagsUpdateManyMutationInput {
  name?: string | null
  linkCount?: number | null
}
export type TagsUpdateManyMutationInputInputObject =
  | Extract<keyof TagsUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'linkCount', alias?: string  } 
  
export interface DiscussCreateInput {
  id?: string | null
  articleId?: number
  contentRaw?: string
  content?: string
  userName?: string | null
  userProfile?: string | null
  userEmail?: string
  parentId?: string | null
}
export type DiscussCreateInputInputObject =
  | Extract<keyof DiscussCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'articleId', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'userName', alias?: string  } 
  | { name: 'userProfile', alias?: string  } 
  | { name: 'userEmail', alias?: string  } 
  | { name: 'parentId', alias?: string  } 
  
export interface DiscussUpdateInput {
  articleId?: number | null
  contentRaw?: string | null
  content?: string | null
  userName?: string | null
  userProfile?: string | null
  userEmail?: string | null
  parentId?: string | null
}
export type DiscussUpdateInputInputObject =
  | Extract<keyof DiscussUpdateInput, string>
  | { name: 'articleId', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'userName', alias?: string  } 
  | { name: 'userProfile', alias?: string  } 
  | { name: 'userEmail', alias?: string  } 
  | { name: 'parentId', alias?: string  } 
  
export interface DiscussUpdateManyMutationInput {
  articleId?: number | null
  contentRaw?: string | null
  content?: string | null
  userName?: string | null
  userProfile?: string | null
  userEmail?: string | null
  parentId?: string | null
}
export type DiscussUpdateManyMutationInputInputObject =
  | Extract<keyof DiscussUpdateManyMutationInput, string>
  | { name: 'articleId', alias?: string  } 
  | { name: 'contentRaw', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'userName', alias?: string  } 
  | { name: 'userProfile', alias?: string  } 
  | { name: 'userEmail', alias?: string  } 
  | { name: 'parentId', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ArticleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ArticleWhereInput | null
  AND?: ArticleSubscriptionWhereInput[]
  OR?: ArticleSubscriptionWhereInput[]
  NOT?: ArticleSubscriptionWhereInput[]
}
export type ArticleSubscriptionWhereInputInputObject =
  | Extract<keyof ArticleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ClassifySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ClassifyWhereInput | null
  AND?: ClassifySubscriptionWhereInput[]
  OR?: ClassifySubscriptionWhereInput[]
  NOT?: ClassifySubscriptionWhereInput[]
}
export type ClassifySubscriptionWhereInputInputObject =
  | Extract<keyof ClassifySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TagsSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TagsWhereInput | null
  AND?: TagsSubscriptionWhereInput[]
  OR?: TagsSubscriptionWhereInput[]
  NOT?: TagsSubscriptionWhereInput[]
}
export type TagsSubscriptionWhereInputInputObject =
  | Extract<keyof TagsSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DiscussSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DiscussWhereInput | null
  AND?: DiscussSubscriptionWhereInput[]
  OR?: DiscussSubscriptionWhereInput[]
  NOT?: DiscussSubscriptionWhereInput[]
}
export type DiscussSubscriptionWhereInputInputObject =
  | Extract<keyof DiscussSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ArticleTypeEnumValues =
  | 'ORIGINAL'
  | 'REPRODUCE'
  | 'PRODUCTION'
  | 'NOTE_TAKING'
  
export type ArticleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'profile_ASC'
  | 'profile_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'contentRaw_ASC'
  | 'contentRaw_DESC'
  | 'tags_ASC'
  | 'tags_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  
export type ClassifyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'parent_ASC'
  | 'parent_DESC'
  | 'parentList_ASC'
  | 'parentList_DESC'
  | 'linkCount_ASC'
  | 'linkCount_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TagsOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'linkCount_ASC'
  | 'linkCount_DESC'
  
export type DiscussOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'articleId_ASC'
  | 'articleId_DESC'
  | 'contentRaw_ASC'
  | 'contentRaw_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'userName_ASC'
  | 'userName_DESC'
  | 'userProfile_ASC'
  | 'userProfile_DESC'
  | 'userEmail_ASC'
  | 'userEmail_DESC'
  | 'parentId_ASC'
  | 'parentId_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  