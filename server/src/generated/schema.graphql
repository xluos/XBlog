### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateArticle {
  count: Int!
}

type AggregateClassify {
  count: Int!
}

type AggregateDiscuss {
  count: Int!
}

type AggregateTags {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Article {
  id: Int!
  pv: Int
  uv: Int
}

type ArticleConnection {
  aggregate: AggregateArticle!
  edges: [ArticleEdge!]!
  pageInfo: PageInfo!
}

input ArticleCreateInput {
  classify: ClassifyCreateOneInput!
  content: String!
  contentRaw: String!
  profile: String
  tags: Json
  title: String!
  type: ArticleTypeEnum
}

input ArticleCreateManyInput {
  connect: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
}

type ArticleEdge {
  cursor: String!
  node: Article!
}

enum ArticleOrderByInput {
  content_ASC
  content_DESC
  contentRaw_ASC
  contentRaw_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  profile_ASC
  profile_DESC
  tags_ASC
  tags_DESC
  title_ASC
  title_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ArticleScalarWhereInput {
  AND: [ArticleScalarWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  contentRaw: String
  contentRaw_contains: String
  contentRaw_ends_with: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_not: String
  contentRaw_not_contains: String
  contentRaw_not_ends_with: String
  contentRaw_not_in: [String!]
  contentRaw_not_starts_with: String
  contentRaw_starts_with: String
  id: Int
  id_gt: Int
  id_gte: Int
  id_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_not: Int
  id_not_in: [Int!]
  NOT: [ArticleScalarWhereInput!]
  OR: [ArticleScalarWhereInput!]
  profile: String
  profile_contains: String
  profile_ends_with: String
  profile_gt: String
  profile_gte: String
  profile_in: [String!]
  profile_lt: String
  profile_lte: String
  profile_not: String
  profile_not_contains: String
  profile_not_ends_with: String
  profile_not_in: [String!]
  profile_not_starts_with: String
  profile_starts_with: String
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  type: ArticleTypeEnum
  type_in: [ArticleTypeEnum!]
  type_not: ArticleTypeEnum
  type_not_in: [ArticleTypeEnum!]
}

enum ArticleTypeEnum {
  NOTE_TAKING
  ORIGINAL
  PRODUCTION
  REPRODUCE
}

input ArticleUpdateDataInput {
  classify: ClassifyUpdateOneRequiredInput
  content: String
  contentRaw: String
  profile: String
  tags: Json
  title: String
  type: ArticleTypeEnum
}

input ArticleUpdateInput {
  classify: ClassifyUpdateOneRequiredInput
  content: String
  contentRaw: String
  profile: String
  tags: Json
  title: String
  type: ArticleTypeEnum
}

input ArticleUpdateManyDataInput {
  content: String
  contentRaw: String
  profile: String
  tags: Json
  title: String
  type: ArticleTypeEnum
}

input ArticleUpdateManyInput {
  connect: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  delete: [ArticleWhereUniqueInput!]
  deleteMany: [ArticleScalarWhereInput!]
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  update: [ArticleUpdateWithWhereUniqueNestedInput!]
  updateMany: [ArticleUpdateManyWithWhereNestedInput!]
  upsert: [ArticleUpsertWithWhereUniqueNestedInput!]
}

input ArticleUpdateManyMutationInput {
  content: String
  contentRaw: String
  profile: String
  tags: Json
  title: String
  type: ArticleTypeEnum
}

input ArticleUpdateManyWithWhereNestedInput {
  data: ArticleUpdateManyDataInput!
  where: ArticleScalarWhereInput!
}

input ArticleUpdateWithWhereUniqueNestedInput {
  data: ArticleUpdateDataInput!
  where: ArticleWhereUniqueInput!
}

input ArticleUpsertWithWhereUniqueNestedInput {
  create: ArticleCreateInput!
  update: ArticleUpdateDataInput!
  where: ArticleWhereUniqueInput!
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  classify: ClassifyWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  contentRaw: String
  contentRaw_contains: String
  contentRaw_ends_with: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_not: String
  contentRaw_not_contains: String
  contentRaw_not_ends_with: String
  contentRaw_not_in: [String!]
  contentRaw_not_starts_with: String
  contentRaw_starts_with: String
  id: Int
  id_gt: Int
  id_gte: Int
  id_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_not: Int
  id_not_in: [Int!]
  NOT: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  profile: String
  profile_contains: String
  profile_ends_with: String
  profile_gt: String
  profile_gte: String
  profile_in: [String!]
  profile_lt: String
  profile_lte: String
  profile_not: String
  profile_not_contains: String
  profile_not_ends_with: String
  profile_not_in: [String!]
  profile_not_starts_with: String
  profile_starts_with: String
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  type: ArticleTypeEnum
  type_in: [ArticleTypeEnum!]
  type_not: ArticleTypeEnum
  type_not_in: [ArticleTypeEnum!]
}

input ArticleWhereUniqueInput {
  id: Int
}

type AuthPayload {
  token: String!
}

type BatchPayload {
  count: Long!
}

type Classify {
  id: Int!
  linkCount: Int
  name: String!
  parent: Int
  parentList: String
}

type ClassifyConnection {
  aggregate: AggregateClassify!
  edges: [ClassifyEdge!]!
  pageInfo: PageInfo!
}

input ClassifyCreateInput {
  linkCount: Int
  name: String!
  parent: Int
  parentList: String
}

input ClassifyCreateOneInput {
  connect: ClassifyWhereUniqueInput
  create: ClassifyCreateInput
}

type ClassifyEdge {
  cursor: String!
  node: Classify!
}

enum ClassifyOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  linkCount_ASC
  linkCount_DESC
  name_ASC
  name_DESC
  parent_ASC
  parent_DESC
  parentList_ASC
  parentList_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ClassifyUpdateDataInput {
  linkCount: Int
  name: String
  parent: Int
  parentList: String
}

input ClassifyUpdateInput {
  linkCount: Int
  name: String
  parent: Int
  parentList: String
}

input ClassifyUpdateManyMutationInput {
  linkCount: Int
  name: String
  parent: Int
  parentList: String
}

input ClassifyUpdateOneRequiredInput {
  connect: ClassifyWhereUniqueInput
  create: ClassifyCreateInput
  update: ClassifyUpdateDataInput
  upsert: ClassifyUpsertNestedInput
}

input ClassifyUpsertNestedInput {
  create: ClassifyCreateInput!
  update: ClassifyUpdateDataInput!
}

input ClassifyWhereInput {
  AND: [ClassifyWhereInput!]
  id: Int
  id_gt: Int
  id_gte: Int
  id_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_not: Int
  id_not_in: [Int!]
  linkCount: Int
  linkCount_gt: Int
  linkCount_gte: Int
  linkCount_in: [Int!]
  linkCount_lt: Int
  linkCount_lte: Int
  linkCount_not: Int
  linkCount_not_in: [Int!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ClassifyWhereInput!]
  OR: [ClassifyWhereInput!]
  parent: Int
  parent_gt: Int
  parent_gte: Int
  parent_in: [Int!]
  parent_lt: Int
  parent_lte: Int
  parent_not: Int
  parent_not_in: [Int!]
  parentList: String
  parentList_contains: String
  parentList_ends_with: String
  parentList_gt: String
  parentList_gte: String
  parentList_in: [String!]
  parentList_lt: String
  parentList_lte: String
  parentList_not: String
  parentList_not_contains: String
  parentList_not_ends_with: String
  parentList_not_in: [String!]
  parentList_not_starts_with: String
  parentList_starts_with: String
}

input ClassifyWhereUniqueInput {
  id: Int
}

scalar DateTime

type Discuss {
  articleId: Int!
  content: String!
  contentRaw: String!
  createdAt: DateTime!
  id: ID!
  parentId: String
  updatedAt: DateTime!
  userEmail: String!
  userName: String
  userProfile: String
}

type DiscussConnection {
  aggregate: AggregateDiscuss!
  edges: [DiscussEdge!]!
  pageInfo: PageInfo!
}

input DiscussCreateInput {
  articleId: Int!
  content: String!
  contentRaw: String!
  id: ID
  parentId: String
  userEmail: String!
  userName: String
  userProfile: String
}

type DiscussEdge {
  cursor: String!
  node: Discuss!
}

enum DiscussOrderByInput {
  articleId_ASC
  articleId_DESC
  content_ASC
  content_DESC
  contentRaw_ASC
  contentRaw_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  parentId_ASC
  parentId_DESC
  updatedAt_ASC
  updatedAt_DESC
  userEmail_ASC
  userEmail_DESC
  userName_ASC
  userName_DESC
  userProfile_ASC
  userProfile_DESC
}

input DiscussUpdateInput {
  articleId: Int
  content: String
  contentRaw: String
  parentId: String
  userEmail: String
  userName: String
  userProfile: String
}

input DiscussUpdateManyMutationInput {
  articleId: Int
  content: String
  contentRaw: String
  parentId: String
  userEmail: String
  userName: String
  userProfile: String
}

input DiscussWhereInput {
  AND: [DiscussWhereInput!]
  articleId: Int
  articleId_gt: Int
  articleId_gte: Int
  articleId_in: [Int!]
  articleId_lt: Int
  articleId_lte: Int
  articleId_not: Int
  articleId_not_in: [Int!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  contentRaw: String
  contentRaw_contains: String
  contentRaw_ends_with: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_not: String
  contentRaw_not_contains: String
  contentRaw_not_ends_with: String
  contentRaw_not_in: [String!]
  contentRaw_not_starts_with: String
  contentRaw_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [DiscussWhereInput!]
  OR: [DiscussWhereInput!]
  parentId: String
  parentId_contains: String
  parentId_ends_with: String
  parentId_gt: String
  parentId_gte: String
  parentId_in: [String!]
  parentId_lt: String
  parentId_lte: String
  parentId_not: String
  parentId_not_contains: String
  parentId_not_ends_with: String
  parentId_not_in: [String!]
  parentId_not_starts_with: String
  parentId_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  userEmail: String
  userEmail_contains: String
  userEmail_ends_with: String
  userEmail_gt: String
  userEmail_gte: String
  userEmail_in: [String!]
  userEmail_lt: String
  userEmail_lte: String
  userEmail_not: String
  userEmail_not_contains: String
  userEmail_not_ends_with: String
  userEmail_not_in: [String!]
  userEmail_not_starts_with: String
  userEmail_starts_with: String
  userName: String
  userName_contains: String
  userName_ends_with: String
  userName_gt: String
  userName_gte: String
  userName_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_not: String
  userName_not_contains: String
  userName_not_ends_with: String
  userName_not_in: [String!]
  userName_not_starts_with: String
  userName_starts_with: String
  userProfile: String
  userProfile_contains: String
  userProfile_ends_with: String
  userProfile_gt: String
  userProfile_gte: String
  userProfile_in: [String!]
  userProfile_lt: String
  userProfile_lte: String
  userProfile_not: String
  userProfile_not_contains: String
  userProfile_not_ends_with: String
  userProfile_not_in: [String!]
  userProfile_not_starts_with: String
  userProfile_starts_with: String
}

input DiscussWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Mutation {
  createArticle(data: ArticleCreateInput!): Article!
  createClassify(data: ClassifyCreateInput!): Classify!
  createDiscuss(data: DiscussCreateInput!): Discuss!
  createTags(data: TagsCreateInput!): Tags!
  createUser(data: UserCreateInput!): User!
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteClassify(where: ClassifyWhereUniqueInput!): Classify
  deleteDiscuss(where: DiscussWhereUniqueInput!): Discuss
  deleteManyArticles(where: ArticleWhereInput): BatchPayload!
  deleteManyClassifies(where: ClassifyWhereInput): BatchPayload!
  deleteManyDiscusses(where: DiscussWhereInput): BatchPayload!
  deleteManyTagses(where: TagsWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteTags(where: TagsWhereUniqueInput!): Tags
  deleteUser(where: UserWhereUniqueInput!): User
  login(email: String, password: String): AuthPayload!
  updateArticle(data: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article
  updateClassify(data: ClassifyUpdateInput!, where: ClassifyWhereUniqueInput!): Classify
  updateDiscuss(data: DiscussUpdateInput!, where: DiscussWhereUniqueInput!): Discuss
  updateManyArticles(data: ArticleUpdateManyMutationInput!, where: ArticleWhereInput): BatchPayload!
  updateManyClassifies(data: ClassifyUpdateManyMutationInput!, where: ClassifyWhereInput): BatchPayload!
  updateManyDiscusses(data: DiscussUpdateManyMutationInput!, where: DiscussWhereInput): BatchPayload!
  updateManyTagses(data: TagsUpdateManyMutationInput!, where: TagsWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateTags(data: TagsUpdateInput!, where: TagsWhereUniqueInput!): Tags
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertArticle(create: ArticleCreateInput!, update: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article!
  upsertClassify(create: ClassifyCreateInput!, update: ClassifyUpdateInput!, where: ClassifyWhereUniqueInput!): Classify!
  upsertDiscuss(create: DiscussCreateInput!, update: DiscussUpdateInput!, where: DiscussWhereUniqueInput!): Discuss!
  upsertTags(create: TagsCreateInput!, update: TagsUpdateInput!, where: TagsWhereUniqueInput!): Tags!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  article(where: ArticleWhereUniqueInput!): Article
  articles(after: String, before: String, first: Int, last: Int, orderBy: ArticleOrderByInput, skip: Int, where: ArticleWhereInput): [Article!]!
  articlesConnection(after: String, before: String, first: Int, last: Int, orderBy: ArticleOrderByInput, skip: Int, where: ArticleWhereInput): ArticleConnection!
  classifies(after: String, before: String, first: Int, last: Int, orderBy: ClassifyOrderByInput, skip: Int, where: ClassifyWhereInput): [Classify!]!
  classifiesConnection(after: String, before: String, first: Int, last: Int, orderBy: ClassifyOrderByInput, skip: Int, where: ClassifyWhereInput): ClassifyConnection!
  classify(where: ClassifyWhereUniqueInput!): Classify
  discuss(where: DiscussWhereUniqueInput!): Discuss
  discusses(after: String, before: String, first: Int, last: Int, orderBy: DiscussOrderByInput, skip: Int, where: DiscussWhereInput): [Discuss!]!
  discussesConnection(after: String, before: String, first: Int, last: Int, orderBy: DiscussOrderByInput, skip: Int, where: DiscussWhereInput): DiscussConnection!
  tags(where: TagsWhereUniqueInput!): Tags
  tagses(after: String, before: String, first: Int, last: Int, orderBy: TagsOrderByInput, skip: Int, where: TagsWhereInput): [Tags!]!
  tagsesConnection(after: String, before: String, first: Int, last: Int, orderBy: TagsOrderByInput, skip: Int, where: TagsWhereInput): TagsConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type Tags {
  createdAt: DateTime!
  id: ID!
  linkCount: Int
  name: String!
  updatedAt: DateTime!
}

type TagsConnection {
  aggregate: AggregateTags!
  edges: [TagsEdge!]!
  pageInfo: PageInfo!
}

input TagsCreateInput {
  id: ID
  linkCount: Int
  name: String!
}

type TagsEdge {
  cursor: String!
  node: Tags!
}

enum TagsOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  linkCount_ASC
  linkCount_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TagsUpdateInput {
  linkCount: Int
  name: String
}

input TagsUpdateManyMutationInput {
  linkCount: Int
  name: String
}

input TagsWhereInput {
  AND: [TagsWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  linkCount: Int
  linkCount_gt: Int
  linkCount_gte: Int
  linkCount_in: [Int!]
  linkCount_lt: Int
  linkCount_lte: Int
  linkCount_not: Int
  linkCount_not_in: [Int!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TagsWhereInput!]
  OR: [TagsWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input TagsWhereUniqueInput {
  id: ID
}

type User {
  articles(after: String, before: String, first: Int, last: Int, orderBy: ArticleOrderByInput, skip: Int, where: ArticleWhereInput): [Article!]
  id: ID!
  name: String!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  articles: ArticleCreateManyInput
  email: String!
  id: ID
  name: String!
  password: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  articles: ArticleUpdateManyInput
  email: String
  name: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  articles_every: ArticleWhereInput
  articles_none: ArticleWhereInput
  articles_some: ArticleWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
