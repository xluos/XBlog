// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateArticle {
  count: Int!
}

type AggregateClassify {
  count: Int!
}

type AggregateDiscuss {
  count: Int!
}

type AggregateTags {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Article {
  id: Int!
  type: ArticleTypeEnum
  profile: String
  title: String!
  content: String!
  contentRaw: String!
  tags: Json
  classify: Classify!
}

type ArticleConnection {
  pageInfo: PageInfo!
  edges: [ArticleEdge]!
  aggregate: AggregateArticle!
}

input ArticleCreateInput {
  type: ArticleTypeEnum
  profile: String
  title: String!
  content: String!
  contentRaw: String!
  tags: Json
  classify: ClassifyCreateOneInput!
}

input ArticleCreateManyInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

type ArticleEdge {
  node: Article!
  cursor: String!
}

enum ArticleOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  profile_ASC
  profile_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  contentRaw_ASC
  contentRaw_DESC
  tags_ASC
  tags_DESC
}

type ArticlePreviousValues {
  id: Int!
  type: ArticleTypeEnum
  profile: String
  title: String!
  content: String!
  contentRaw: String!
  tags: Json
}

input ArticleScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  type: ArticleTypeEnum
  type_not: ArticleTypeEnum
  type_in: [ArticleTypeEnum!]
  type_not_in: [ArticleTypeEnum!]
  profile: String
  profile_not: String
  profile_in: [String!]
  profile_not_in: [String!]
  profile_lt: String
  profile_lte: String
  profile_gt: String
  profile_gte: String
  profile_contains: String
  profile_not_contains: String
  profile_starts_with: String
  profile_not_starts_with: String
  profile_ends_with: String
  profile_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  contentRaw: String
  contentRaw_not: String
  contentRaw_in: [String!]
  contentRaw_not_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_contains: String
  contentRaw_not_contains: String
  contentRaw_starts_with: String
  contentRaw_not_starts_with: String
  contentRaw_ends_with: String
  contentRaw_not_ends_with: String
  AND: [ArticleScalarWhereInput!]
  OR: [ArticleScalarWhereInput!]
  NOT: [ArticleScalarWhereInput!]
}

type ArticleSubscriptionPayload {
  mutation: MutationType!
  node: Article
  updatedFields: [String!]
  previousValues: ArticlePreviousValues
}

input ArticleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ArticleWhereInput
  AND: [ArticleSubscriptionWhereInput!]
  OR: [ArticleSubscriptionWhereInput!]
  NOT: [ArticleSubscriptionWhereInput!]
}

enum ArticleTypeEnum {
  ORIGINAL
  REPRODUCE
  PRODUCTION
  NOTE_TAKING
}

input ArticleUpdateDataInput {
  type: ArticleTypeEnum
  profile: String
  title: String
  content: String
  contentRaw: String
  tags: Json
  classify: ClassifyUpdateOneRequiredInput
}

input ArticleUpdateInput {
  type: ArticleTypeEnum
  profile: String
  title: String
  content: String
  contentRaw: String
  tags: Json
  classify: ClassifyUpdateOneRequiredInput
}

input ArticleUpdateManyDataInput {
  type: ArticleTypeEnum
  profile: String
  title: String
  content: String
  contentRaw: String
  tags: Json
}

input ArticleUpdateManyInput {
  create: [ArticleCreateInput!]
  update: [ArticleUpdateWithWhereUniqueNestedInput!]
  upsert: [ArticleUpsertWithWhereUniqueNestedInput!]
  delete: [ArticleWhereUniqueInput!]
  connect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  disconnect: [ArticleWhereUniqueInput!]
  deleteMany: [ArticleScalarWhereInput!]
  updateMany: [ArticleUpdateManyWithWhereNestedInput!]
}

input ArticleUpdateManyMutationInput {
  type: ArticleTypeEnum
  profile: String
  title: String
  content: String
  contentRaw: String
  tags: Json
}

input ArticleUpdateManyWithWhereNestedInput {
  where: ArticleScalarWhereInput!
  data: ArticleUpdateManyDataInput!
}

input ArticleUpdateWithWhereUniqueNestedInput {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateDataInput!
}

input ArticleUpsertWithWhereUniqueNestedInput {
  where: ArticleWhereUniqueInput!
  update: ArticleUpdateDataInput!
  create: ArticleCreateInput!
}

input ArticleWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  type: ArticleTypeEnum
  type_not: ArticleTypeEnum
  type_in: [ArticleTypeEnum!]
  type_not_in: [ArticleTypeEnum!]
  profile: String
  profile_not: String
  profile_in: [String!]
  profile_not_in: [String!]
  profile_lt: String
  profile_lte: String
  profile_gt: String
  profile_gte: String
  profile_contains: String
  profile_not_contains: String
  profile_starts_with: String
  profile_not_starts_with: String
  profile_ends_with: String
  profile_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  contentRaw: String
  contentRaw_not: String
  contentRaw_in: [String!]
  contentRaw_not_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_contains: String
  contentRaw_not_contains: String
  contentRaw_starts_with: String
  contentRaw_not_starts_with: String
  contentRaw_ends_with: String
  contentRaw_not_ends_with: String
  classify: ClassifyWhereInput
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
}

input ArticleWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Long!
}

type Classify {
  id: Int!
  name: String!
  parent: Int
  parentList: String
  linkCount: Int
}

type ClassifyConnection {
  pageInfo: PageInfo!
  edges: [ClassifyEdge]!
  aggregate: AggregateClassify!
}

input ClassifyCreateInput {
  name: String!
  parent: Int
  parentList: String
  linkCount: Int
}

input ClassifyCreateOneInput {
  create: ClassifyCreateInput
  connect: ClassifyWhereUniqueInput
}

type ClassifyEdge {
  node: Classify!
  cursor: String!
}

enum ClassifyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  parent_ASC
  parent_DESC
  parentList_ASC
  parentList_DESC
  linkCount_ASC
  linkCount_DESC
}

type ClassifyPreviousValues {
  id: Int!
  name: String!
  parent: Int
  parentList: String
  linkCount: Int
}

type ClassifySubscriptionPayload {
  mutation: MutationType!
  node: Classify
  updatedFields: [String!]
  previousValues: ClassifyPreviousValues
}

input ClassifySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClassifyWhereInput
  AND: [ClassifySubscriptionWhereInput!]
  OR: [ClassifySubscriptionWhereInput!]
  NOT: [ClassifySubscriptionWhereInput!]
}

input ClassifyUpdateDataInput {
  name: String
  parent: Int
  parentList: String
  linkCount: Int
}

input ClassifyUpdateInput {
  name: String
  parent: Int
  parentList: String
  linkCount: Int
}

input ClassifyUpdateManyMutationInput {
  name: String
  parent: Int
  parentList: String
  linkCount: Int
}

input ClassifyUpdateOneRequiredInput {
  create: ClassifyCreateInput
  update: ClassifyUpdateDataInput
  upsert: ClassifyUpsertNestedInput
  connect: ClassifyWhereUniqueInput
}

input ClassifyUpsertNestedInput {
  update: ClassifyUpdateDataInput!
  create: ClassifyCreateInput!
}

input ClassifyWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  parent: Int
  parent_not: Int
  parent_in: [Int!]
  parent_not_in: [Int!]
  parent_lt: Int
  parent_lte: Int
  parent_gt: Int
  parent_gte: Int
  parentList: String
  parentList_not: String
  parentList_in: [String!]
  parentList_not_in: [String!]
  parentList_lt: String
  parentList_lte: String
  parentList_gt: String
  parentList_gte: String
  parentList_contains: String
  parentList_not_contains: String
  parentList_starts_with: String
  parentList_not_starts_with: String
  parentList_ends_with: String
  parentList_not_ends_with: String
  linkCount: Int
  linkCount_not: Int
  linkCount_in: [Int!]
  linkCount_not_in: [Int!]
  linkCount_lt: Int
  linkCount_lte: Int
  linkCount_gt: Int
  linkCount_gte: Int
  AND: [ClassifyWhereInput!]
  OR: [ClassifyWhereInput!]
  NOT: [ClassifyWhereInput!]
}

input ClassifyWhereUniqueInput {
  id: Int
}

scalar DateTime

type Discuss {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  articleId: Int!
  contentRaw: String!
  content: String!
  userName: String
  userProfile: String
  userEmail: String!
  parentId: String
}

type DiscussConnection {
  pageInfo: PageInfo!
  edges: [DiscussEdge]!
  aggregate: AggregateDiscuss!
}

input DiscussCreateInput {
  id: ID
  articleId: Int!
  contentRaw: String!
  content: String!
  userName: String
  userProfile: String
  userEmail: String!
  parentId: String
}

type DiscussEdge {
  node: Discuss!
  cursor: String!
}

enum DiscussOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  articleId_ASC
  articleId_DESC
  contentRaw_ASC
  contentRaw_DESC
  content_ASC
  content_DESC
  userName_ASC
  userName_DESC
  userProfile_ASC
  userProfile_DESC
  userEmail_ASC
  userEmail_DESC
  parentId_ASC
  parentId_DESC
}

type DiscussPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  articleId: Int!
  contentRaw: String!
  content: String!
  userName: String
  userProfile: String
  userEmail: String!
  parentId: String
}

type DiscussSubscriptionPayload {
  mutation: MutationType!
  node: Discuss
  updatedFields: [String!]
  previousValues: DiscussPreviousValues
}

input DiscussSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiscussWhereInput
  AND: [DiscussSubscriptionWhereInput!]
  OR: [DiscussSubscriptionWhereInput!]
  NOT: [DiscussSubscriptionWhereInput!]
}

input DiscussUpdateInput {
  articleId: Int
  contentRaw: String
  content: String
  userName: String
  userProfile: String
  userEmail: String
  parentId: String
}

input DiscussUpdateManyMutationInput {
  articleId: Int
  contentRaw: String
  content: String
  userName: String
  userProfile: String
  userEmail: String
  parentId: String
}

input DiscussWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  articleId: Int
  articleId_not: Int
  articleId_in: [Int!]
  articleId_not_in: [Int!]
  articleId_lt: Int
  articleId_lte: Int
  articleId_gt: Int
  articleId_gte: Int
  contentRaw: String
  contentRaw_not: String
  contentRaw_in: [String!]
  contentRaw_not_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_contains: String
  contentRaw_not_contains: String
  contentRaw_starts_with: String
  contentRaw_not_starts_with: String
  contentRaw_ends_with: String
  contentRaw_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  userProfile: String
  userProfile_not: String
  userProfile_in: [String!]
  userProfile_not_in: [String!]
  userProfile_lt: String
  userProfile_lte: String
  userProfile_gt: String
  userProfile_gte: String
  userProfile_contains: String
  userProfile_not_contains: String
  userProfile_starts_with: String
  userProfile_not_starts_with: String
  userProfile_ends_with: String
  userProfile_not_ends_with: String
  userEmail: String
  userEmail_not: String
  userEmail_in: [String!]
  userEmail_not_in: [String!]
  userEmail_lt: String
  userEmail_lte: String
  userEmail_gt: String
  userEmail_gte: String
  userEmail_contains: String
  userEmail_not_contains: String
  userEmail_starts_with: String
  userEmail_not_starts_with: String
  userEmail_ends_with: String
  userEmail_not_ends_with: String
  parentId: String
  parentId_not: String
  parentId_in: [String!]
  parentId_not_in: [String!]
  parentId_lt: String
  parentId_lte: String
  parentId_gt: String
  parentId_gte: String
  parentId_contains: String
  parentId_not_contains: String
  parentId_starts_with: String
  parentId_not_starts_with: String
  parentId_ends_with: String
  parentId_not_ends_with: String
  AND: [DiscussWhereInput!]
  OR: [DiscussWhereInput!]
  NOT: [DiscussWhereInput!]
}

input DiscussWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Mutation {
  createArticle(data: ArticleCreateInput!): Article!
  updateArticle(data: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article
  updateManyArticles(data: ArticleUpdateManyMutationInput!, where: ArticleWhereInput): BatchPayload!
  upsertArticle(where: ArticleWhereUniqueInput!, create: ArticleCreateInput!, update: ArticleUpdateInput!): Article!
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteManyArticles(where: ArticleWhereInput): BatchPayload!
  createClassify(data: ClassifyCreateInput!): Classify!
  updateClassify(data: ClassifyUpdateInput!, where: ClassifyWhereUniqueInput!): Classify
  updateManyClassifies(data: ClassifyUpdateManyMutationInput!, where: ClassifyWhereInput): BatchPayload!
  upsertClassify(where: ClassifyWhereUniqueInput!, create: ClassifyCreateInput!, update: ClassifyUpdateInput!): Classify!
  deleteClassify(where: ClassifyWhereUniqueInput!): Classify
  deleteManyClassifies(where: ClassifyWhereInput): BatchPayload!
  createDiscuss(data: DiscussCreateInput!): Discuss!
  updateDiscuss(data: DiscussUpdateInput!, where: DiscussWhereUniqueInput!): Discuss
  updateManyDiscusses(data: DiscussUpdateManyMutationInput!, where: DiscussWhereInput): BatchPayload!
  upsertDiscuss(where: DiscussWhereUniqueInput!, create: DiscussCreateInput!, update: DiscussUpdateInput!): Discuss!
  deleteDiscuss(where: DiscussWhereUniqueInput!): Discuss
  deleteManyDiscusses(where: DiscussWhereInput): BatchPayload!
  createTags(data: TagsCreateInput!): Tags!
  updateTags(data: TagsUpdateInput!, where: TagsWhereUniqueInput!): Tags
  updateManyTagses(data: TagsUpdateManyMutationInput!, where: TagsWhereInput): BatchPayload!
  upsertTags(where: TagsWhereUniqueInput!, create: TagsCreateInput!, update: TagsUpdateInput!): Tags!
  deleteTags(where: TagsWhereUniqueInput!): Tags
  deleteManyTagses(where: TagsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  article(where: ArticleWhereUniqueInput!): Article
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article]!
  articlesConnection(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection!
  classify(where: ClassifyWhereUniqueInput!): Classify
  classifies(where: ClassifyWhereInput, orderBy: ClassifyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classify]!
  classifiesConnection(where: ClassifyWhereInput, orderBy: ClassifyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassifyConnection!
  discuss(where: DiscussWhereUniqueInput!): Discuss
  discusses(where: DiscussWhereInput, orderBy: DiscussOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discuss]!
  discussesConnection(where: DiscussWhereInput, orderBy: DiscussOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscussConnection!
  tags(where: TagsWhereUniqueInput!): Tags
  tagses(where: TagsWhereInput, orderBy: TagsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tags]!
  tagsesConnection(where: TagsWhereInput, orderBy: TagsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  article(where: ArticleSubscriptionWhereInput): ArticleSubscriptionPayload
  classify(where: ClassifySubscriptionWhereInput): ClassifySubscriptionPayload
  discuss(where: DiscussSubscriptionWhereInput): DiscussSubscriptionPayload
  tags(where: TagsSubscriptionWhereInput): TagsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tags {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  linkCount: Int
}

type TagsConnection {
  pageInfo: PageInfo!
  edges: [TagsEdge]!
  aggregate: AggregateTags!
}

input TagsCreateInput {
  id: ID
  name: String!
  linkCount: Int
}

type TagsEdge {
  node: Tags!
  cursor: String!
}

enum TagsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  linkCount_ASC
  linkCount_DESC
}

type TagsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  linkCount: Int
}

type TagsSubscriptionPayload {
  mutation: MutationType!
  node: Tags
  updatedFields: [String!]
  previousValues: TagsPreviousValues
}

input TagsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagsWhereInput
  AND: [TagsSubscriptionWhereInput!]
  OR: [TagsSubscriptionWhereInput!]
  NOT: [TagsSubscriptionWhereInput!]
}

input TagsUpdateInput {
  name: String
  linkCount: Int
}

input TagsUpdateManyMutationInput {
  name: String
  linkCount: Int
}

input TagsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  linkCount: Int
  linkCount_not: Int
  linkCount_in: [Int!]
  linkCount_not_in: [Int!]
  linkCount_lt: Int
  linkCount_lte: Int
  linkCount_gt: Int
  linkCount_gte: Int
  AND: [TagsWhereInput!]
  OR: [TagsWhereInput!]
  NOT: [TagsWhereInput!]
}

input TagsWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  articles: ArticleCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  articles: ArticleUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  articles_every: ArticleWhereInput
  articles_some: ArticleWhereInput
  articles_none: ArticleWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`