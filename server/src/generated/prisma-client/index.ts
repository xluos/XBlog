// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  article: (where?: ArticleWhereInput) => Promise<boolean>;
  classify: (where?: ClassifyWhereInput) => Promise<boolean>;
  discuss: (where?: DiscussWhereInput) => Promise<boolean>;
  tags: (where?: TagsWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  article: (where: ArticleWhereUniqueInput) => ArticleNullablePromise;
  articles: (args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Article>;
  articlesConnection: (args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArticleConnectionPromise;
  classify: (where: ClassifyWhereUniqueInput) => ClassifyNullablePromise;
  classifies: (args?: {
    where?: ClassifyWhereInput;
    orderBy?: ClassifyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Classify>;
  classifiesConnection: (args?: {
    where?: ClassifyWhereInput;
    orderBy?: ClassifyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassifyConnectionPromise;
  discuss: (where: DiscussWhereUniqueInput) => DiscussNullablePromise;
  discusses: (args?: {
    where?: DiscussWhereInput;
    orderBy?: DiscussOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Discuss>;
  discussesConnection: (args?: {
    where?: DiscussWhereInput;
    orderBy?: DiscussOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DiscussConnectionPromise;
  tags: (where: TagsWhereUniqueInput) => TagsNullablePromise;
  tagses: (args?: {
    where?: TagsWhereInput;
    orderBy?: TagsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tags>;
  tagsesConnection: (args?: {
    where?: TagsWhereInput;
    orderBy?: TagsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagsConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArticle: (data: ArticleCreateInput) => ArticlePromise;
  updateArticle: (args: {
    data: ArticleUpdateInput;
    where: ArticleWhereUniqueInput;
  }) => ArticlePromise;
  updateManyArticles: (args: {
    data: ArticleUpdateManyMutationInput;
    where?: ArticleWhereInput;
  }) => BatchPayloadPromise;
  upsertArticle: (args: {
    where: ArticleWhereUniqueInput;
    create: ArticleCreateInput;
    update: ArticleUpdateInput;
  }) => ArticlePromise;
  deleteArticle: (where: ArticleWhereUniqueInput) => ArticlePromise;
  deleteManyArticles: (where?: ArticleWhereInput) => BatchPayloadPromise;
  createClassify: (data: ClassifyCreateInput) => ClassifyPromise;
  updateClassify: (args: {
    data: ClassifyUpdateInput;
    where: ClassifyWhereUniqueInput;
  }) => ClassifyPromise;
  updateManyClassifies: (args: {
    data: ClassifyUpdateManyMutationInput;
    where?: ClassifyWhereInput;
  }) => BatchPayloadPromise;
  upsertClassify: (args: {
    where: ClassifyWhereUniqueInput;
    create: ClassifyCreateInput;
    update: ClassifyUpdateInput;
  }) => ClassifyPromise;
  deleteClassify: (where: ClassifyWhereUniqueInput) => ClassifyPromise;
  deleteManyClassifies: (where?: ClassifyWhereInput) => BatchPayloadPromise;
  createDiscuss: (data: DiscussCreateInput) => DiscussPromise;
  updateDiscuss: (args: {
    data: DiscussUpdateInput;
    where: DiscussWhereUniqueInput;
  }) => DiscussPromise;
  updateManyDiscusses: (args: {
    data: DiscussUpdateManyMutationInput;
    where?: DiscussWhereInput;
  }) => BatchPayloadPromise;
  upsertDiscuss: (args: {
    where: DiscussWhereUniqueInput;
    create: DiscussCreateInput;
    update: DiscussUpdateInput;
  }) => DiscussPromise;
  deleteDiscuss: (where: DiscussWhereUniqueInput) => DiscussPromise;
  deleteManyDiscusses: (where?: DiscussWhereInput) => BatchPayloadPromise;
  createTags: (data: TagsCreateInput) => TagsPromise;
  updateTags: (args: {
    data: TagsUpdateInput;
    where: TagsWhereUniqueInput;
  }) => TagsPromise;
  updateManyTagses: (args: {
    data: TagsUpdateManyMutationInput;
    where?: TagsWhereInput;
  }) => BatchPayloadPromise;
  upsertTags: (args: {
    where: TagsWhereUniqueInput;
    create: TagsCreateInput;
    update: TagsUpdateInput;
  }) => TagsPromise;
  deleteTags: (where: TagsWhereUniqueInput) => TagsPromise;
  deleteManyTagses: (where?: TagsWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  article: (
    where?: ArticleSubscriptionWhereInput
  ) => ArticleSubscriptionPayloadSubscription;
  classify: (
    where?: ClassifySubscriptionWhereInput
  ) => ClassifySubscriptionPayloadSubscription;
  discuss: (
    where?: DiscussSubscriptionWhereInput
  ) => DiscussSubscriptionPayloadSubscription;
  tags: (
    where?: TagsSubscriptionWhereInput
  ) => TagsSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ArticleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "profile_ASC"
  | "profile_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "contentRaw_ASC"
  | "contentRaw_DESC"
  | "tags_ASC"
  | "tags_DESC";

export type ClassifyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "parent_ASC"
  | "parent_DESC"
  | "parentList_ASC"
  | "parentList_DESC"
  | "linkCount_ASC"
  | "linkCount_DESC";

export type DiscussOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "articleId_ASC"
  | "articleId_DESC"
  | "contentRaw_ASC"
  | "contentRaw_DESC"
  | "content_ASC"
  | "content_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "userProfile_ASC"
  | "userProfile_DESC"
  | "userEmail_ASC"
  | "userEmail_DESC"
  | "parentId_ASC"
  | "parentId_DESC";

export type TagsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "linkCount_ASC"
  | "linkCount_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type ArticleTypeEnum =
  | "ORIGINAL"
  | "REPRODUCE"
  | "PRODUCTION"
  | "NOTE_TAKING";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ArticleCreateInput {
  type?: Maybe<ArticleTypeEnum>;
  profile?: Maybe<String>;
  title: String;
  content: String;
  contentRaw: String;
  tags?: Maybe<Json>;
  classify: ClassifyCreateOneInput;
}

export type ArticleWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ClassifyUpdateDataInput {
  name?: Maybe<String>;
  parent?: Maybe<Int>;
  parentList?: Maybe<String>;
  linkCount?: Maybe<Int>;
}

export interface ClassifyWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  parent?: Maybe<Int>;
  parent_not?: Maybe<Int>;
  parent_in?: Maybe<Int[] | Int>;
  parent_not_in?: Maybe<Int[] | Int>;
  parent_lt?: Maybe<Int>;
  parent_lte?: Maybe<Int>;
  parent_gt?: Maybe<Int>;
  parent_gte?: Maybe<Int>;
  parentList?: Maybe<String>;
  parentList_not?: Maybe<String>;
  parentList_in?: Maybe<String[] | String>;
  parentList_not_in?: Maybe<String[] | String>;
  parentList_lt?: Maybe<String>;
  parentList_lte?: Maybe<String>;
  parentList_gt?: Maybe<String>;
  parentList_gte?: Maybe<String>;
  parentList_contains?: Maybe<String>;
  parentList_not_contains?: Maybe<String>;
  parentList_starts_with?: Maybe<String>;
  parentList_not_starts_with?: Maybe<String>;
  parentList_ends_with?: Maybe<String>;
  parentList_not_ends_with?: Maybe<String>;
  linkCount?: Maybe<Int>;
  linkCount_not?: Maybe<Int>;
  linkCount_in?: Maybe<Int[] | Int>;
  linkCount_not_in?: Maybe<Int[] | Int>;
  linkCount_lt?: Maybe<Int>;
  linkCount_lte?: Maybe<Int>;
  linkCount_gt?: Maybe<Int>;
  linkCount_gte?: Maybe<Int>;
  AND?: Maybe<ClassifyWhereInput[] | ClassifyWhereInput>;
  OR?: Maybe<ClassifyWhereInput[] | ClassifyWhereInput>;
  NOT?: Maybe<ClassifyWhereInput[] | ClassifyWhereInput>;
}

export interface TagsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  linkCount?: Maybe<Int>;
  linkCount_not?: Maybe<Int>;
  linkCount_in?: Maybe<Int[] | Int>;
  linkCount_not_in?: Maybe<Int[] | Int>;
  linkCount_lt?: Maybe<Int>;
  linkCount_lte?: Maybe<Int>;
  linkCount_gt?: Maybe<Int>;
  linkCount_gte?: Maybe<Int>;
  AND?: Maybe<TagsWhereInput[] | TagsWhereInput>;
  OR?: Maybe<TagsWhereInput[] | TagsWhereInput>;
  NOT?: Maybe<TagsWhereInput[] | TagsWhereInput>;
}

export interface ArticleUpdateManyMutationInput {
  type?: Maybe<ArticleTypeEnum>;
  profile?: Maybe<String>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  contentRaw?: Maybe<String>;
  tags?: Maybe<Json>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  articles?: Maybe<ArticleUpdateManyInput>;
}

export interface ClassifyUpsertNestedInput {
  update: ClassifyUpdateDataInput;
  create: ClassifyCreateInput;
}

export interface ArticleCreateManyInput {
  create?: Maybe<ArticleCreateInput[] | ArticleCreateInput>;
  connect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
}

export interface TagsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagsWhereInput>;
  AND?: Maybe<TagsSubscriptionWhereInput[] | TagsSubscriptionWhereInput>;
  OR?: Maybe<TagsSubscriptionWhereInput[] | TagsSubscriptionWhereInput>;
  NOT?: Maybe<TagsSubscriptionWhereInput[] | TagsSubscriptionWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  articles?: Maybe<ArticleCreateManyInput>;
}

export interface ArticleWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  type?: Maybe<ArticleTypeEnum>;
  type_not?: Maybe<ArticleTypeEnum>;
  type_in?: Maybe<ArticleTypeEnum[] | ArticleTypeEnum>;
  type_not_in?: Maybe<ArticleTypeEnum[] | ArticleTypeEnum>;
  profile?: Maybe<String>;
  profile_not?: Maybe<String>;
  profile_in?: Maybe<String[] | String>;
  profile_not_in?: Maybe<String[] | String>;
  profile_lt?: Maybe<String>;
  profile_lte?: Maybe<String>;
  profile_gt?: Maybe<String>;
  profile_gte?: Maybe<String>;
  profile_contains?: Maybe<String>;
  profile_not_contains?: Maybe<String>;
  profile_starts_with?: Maybe<String>;
  profile_not_starts_with?: Maybe<String>;
  profile_ends_with?: Maybe<String>;
  profile_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  contentRaw?: Maybe<String>;
  contentRaw_not?: Maybe<String>;
  contentRaw_in?: Maybe<String[] | String>;
  contentRaw_not_in?: Maybe<String[] | String>;
  contentRaw_lt?: Maybe<String>;
  contentRaw_lte?: Maybe<String>;
  contentRaw_gt?: Maybe<String>;
  contentRaw_gte?: Maybe<String>;
  contentRaw_contains?: Maybe<String>;
  contentRaw_not_contains?: Maybe<String>;
  contentRaw_starts_with?: Maybe<String>;
  contentRaw_not_starts_with?: Maybe<String>;
  contentRaw_ends_with?: Maybe<String>;
  contentRaw_not_ends_with?: Maybe<String>;
  classify?: Maybe<ClassifyWhereInput>;
  AND?: Maybe<ArticleWhereInput[] | ArticleWhereInput>;
  OR?: Maybe<ArticleWhereInput[] | ArticleWhereInput>;
  NOT?: Maybe<ArticleWhereInput[] | ArticleWhereInput>;
}

export interface TagsUpdateManyMutationInput {
  name?: Maybe<String>;
  linkCount?: Maybe<Int>;
}

export interface ClassifySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClassifyWhereInput>;
  AND?: Maybe<
    ClassifySubscriptionWhereInput[] | ClassifySubscriptionWhereInput
  >;
  OR?: Maybe<ClassifySubscriptionWhereInput[] | ClassifySubscriptionWhereInput>;
  NOT?: Maybe<
    ClassifySubscriptionWhereInput[] | ClassifySubscriptionWhereInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type DiscussWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TagsUpdateInput {
  name?: Maybe<String>;
  linkCount?: Maybe<Int>;
}

export interface ArticleUpdateManyDataInput {
  type?: Maybe<ArticleTypeEnum>;
  profile?: Maybe<String>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  contentRaw?: Maybe<String>;
  tags?: Maybe<Json>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  articles_every?: Maybe<ArticleWhereInput>;
  articles_some?: Maybe<ArticleWhereInput>;
  articles_none?: Maybe<ArticleWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface DiscussWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  articleId?: Maybe<Int>;
  articleId_not?: Maybe<Int>;
  articleId_in?: Maybe<Int[] | Int>;
  articleId_not_in?: Maybe<Int[] | Int>;
  articleId_lt?: Maybe<Int>;
  articleId_lte?: Maybe<Int>;
  articleId_gt?: Maybe<Int>;
  articleId_gte?: Maybe<Int>;
  contentRaw?: Maybe<String>;
  contentRaw_not?: Maybe<String>;
  contentRaw_in?: Maybe<String[] | String>;
  contentRaw_not_in?: Maybe<String[] | String>;
  contentRaw_lt?: Maybe<String>;
  contentRaw_lte?: Maybe<String>;
  contentRaw_gt?: Maybe<String>;
  contentRaw_gte?: Maybe<String>;
  contentRaw_contains?: Maybe<String>;
  contentRaw_not_contains?: Maybe<String>;
  contentRaw_starts_with?: Maybe<String>;
  contentRaw_not_starts_with?: Maybe<String>;
  contentRaw_ends_with?: Maybe<String>;
  contentRaw_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  userProfile?: Maybe<String>;
  userProfile_not?: Maybe<String>;
  userProfile_in?: Maybe<String[] | String>;
  userProfile_not_in?: Maybe<String[] | String>;
  userProfile_lt?: Maybe<String>;
  userProfile_lte?: Maybe<String>;
  userProfile_gt?: Maybe<String>;
  userProfile_gte?: Maybe<String>;
  userProfile_contains?: Maybe<String>;
  userProfile_not_contains?: Maybe<String>;
  userProfile_starts_with?: Maybe<String>;
  userProfile_not_starts_with?: Maybe<String>;
  userProfile_ends_with?: Maybe<String>;
  userProfile_not_ends_with?: Maybe<String>;
  userEmail?: Maybe<String>;
  userEmail_not?: Maybe<String>;
  userEmail_in?: Maybe<String[] | String>;
  userEmail_not_in?: Maybe<String[] | String>;
  userEmail_lt?: Maybe<String>;
  userEmail_lte?: Maybe<String>;
  userEmail_gt?: Maybe<String>;
  userEmail_gte?: Maybe<String>;
  userEmail_contains?: Maybe<String>;
  userEmail_not_contains?: Maybe<String>;
  userEmail_starts_with?: Maybe<String>;
  userEmail_not_starts_with?: Maybe<String>;
  userEmail_ends_with?: Maybe<String>;
  userEmail_not_ends_with?: Maybe<String>;
  parentId?: Maybe<String>;
  parentId_not?: Maybe<String>;
  parentId_in?: Maybe<String[] | String>;
  parentId_not_in?: Maybe<String[] | String>;
  parentId_lt?: Maybe<String>;
  parentId_lte?: Maybe<String>;
  parentId_gt?: Maybe<String>;
  parentId_gte?: Maybe<String>;
  parentId_contains?: Maybe<String>;
  parentId_not_contains?: Maybe<String>;
  parentId_starts_with?: Maybe<String>;
  parentId_not_starts_with?: Maybe<String>;
  parentId_ends_with?: Maybe<String>;
  parentId_not_ends_with?: Maybe<String>;
  AND?: Maybe<DiscussWhereInput[] | DiscussWhereInput>;
  OR?: Maybe<DiscussWhereInput[] | DiscussWhereInput>;
  NOT?: Maybe<DiscussWhereInput[] | DiscussWhereInput>;
}

export interface TagsCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  linkCount?: Maybe<Int>;
}

export interface ArticleUpsertWithWhereUniqueNestedInput {
  where: ArticleWhereUniqueInput;
  update: ArticleUpdateDataInput;
  create: ArticleCreateInput;
}

export interface DiscussUpdateManyMutationInput {
  articleId?: Maybe<Int>;
  contentRaw?: Maybe<String>;
  content?: Maybe<String>;
  userName?: Maybe<String>;
  userProfile?: Maybe<String>;
  userEmail?: Maybe<String>;
  parentId?: Maybe<String>;
}

export interface ArticleUpdateWithWhereUniqueNestedInput {
  where: ArticleWhereUniqueInput;
  data: ArticleUpdateDataInput;
}

export interface DiscussUpdateInput {
  articleId?: Maybe<Int>;
  contentRaw?: Maybe<String>;
  content?: Maybe<String>;
  userName?: Maybe<String>;
  userProfile?: Maybe<String>;
  userEmail?: Maybe<String>;
  parentId?: Maybe<String>;
}

export interface ArticleUpdateManyInput {
  create?: Maybe<ArticleCreateInput[] | ArticleCreateInput>;
  update?: Maybe<
    | ArticleUpdateWithWhereUniqueNestedInput[]
    | ArticleUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ArticleUpsertWithWhereUniqueNestedInput[]
    | ArticleUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  connect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  set?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  disconnect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  deleteMany?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
  updateMany?: Maybe<
    | ArticleUpdateManyWithWhereNestedInput[]
    | ArticleUpdateManyWithWhereNestedInput
  >;
}

export interface DiscussCreateInput {
  id?: Maybe<ID_Input>;
  articleId: Int;
  contentRaw: String;
  content: String;
  userName?: Maybe<String>;
  userProfile?: Maybe<String>;
  userEmail: String;
  parentId?: Maybe<String>;
}

export type ClassifyWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface ArticleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArticleWhereInput>;
  AND?: Maybe<ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput>;
  OR?: Maybe<ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput>;
  NOT?: Maybe<ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput>;
}

export interface ArticleUpdateManyWithWhereNestedInput {
  where: ArticleScalarWhereInput;
  data: ArticleUpdateManyDataInput;
}

export interface ClassifyUpdateManyMutationInput {
  name?: Maybe<String>;
  parent?: Maybe<Int>;
  parentList?: Maybe<String>;
  linkCount?: Maybe<Int>;
}

export interface ArticleUpdateDataInput {
  type?: Maybe<ArticleTypeEnum>;
  profile?: Maybe<String>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  contentRaw?: Maybe<String>;
  tags?: Maybe<Json>;
  classify?: Maybe<ClassifyUpdateOneRequiredInput>;
}

export interface ClassifyCreateOneInput {
  create?: Maybe<ClassifyCreateInput>;
  connect?: Maybe<ClassifyWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ClassifyUpdateInput {
  name?: Maybe<String>;
  parent?: Maybe<Int>;
  parentList?: Maybe<String>;
  linkCount?: Maybe<Int>;
}

export interface ClassifyUpdateOneRequiredInput {
  create?: Maybe<ClassifyCreateInput>;
  update?: Maybe<ClassifyUpdateDataInput>;
  upsert?: Maybe<ClassifyUpsertNestedInput>;
  connect?: Maybe<ClassifyWhereUniqueInput>;
}

export interface ArticleUpdateInput {
  type?: Maybe<ArticleTypeEnum>;
  profile?: Maybe<String>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  contentRaw?: Maybe<String>;
  tags?: Maybe<Json>;
  classify?: Maybe<ClassifyUpdateOneRequiredInput>;
}

export interface ClassifyCreateInput {
  name: String;
  parent?: Maybe<Int>;
  parentList?: Maybe<String>;
  linkCount?: Maybe<Int>;
}

export interface DiscussSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DiscussWhereInput>;
  AND?: Maybe<DiscussSubscriptionWhereInput[] | DiscussSubscriptionWhereInput>;
  OR?: Maybe<DiscussSubscriptionWhereInput[] | DiscussSubscriptionWhereInput>;
  NOT?: Maybe<DiscussSubscriptionWhereInput[] | DiscussSubscriptionWhereInput>;
}

export type TagsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ArticleScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  type?: Maybe<ArticleTypeEnum>;
  type_not?: Maybe<ArticleTypeEnum>;
  type_in?: Maybe<ArticleTypeEnum[] | ArticleTypeEnum>;
  type_not_in?: Maybe<ArticleTypeEnum[] | ArticleTypeEnum>;
  profile?: Maybe<String>;
  profile_not?: Maybe<String>;
  profile_in?: Maybe<String[] | String>;
  profile_not_in?: Maybe<String[] | String>;
  profile_lt?: Maybe<String>;
  profile_lte?: Maybe<String>;
  profile_gt?: Maybe<String>;
  profile_gte?: Maybe<String>;
  profile_contains?: Maybe<String>;
  profile_not_contains?: Maybe<String>;
  profile_starts_with?: Maybe<String>;
  profile_not_starts_with?: Maybe<String>;
  profile_ends_with?: Maybe<String>;
  profile_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  contentRaw?: Maybe<String>;
  contentRaw_not?: Maybe<String>;
  contentRaw_in?: Maybe<String[] | String>;
  contentRaw_not_in?: Maybe<String[] | String>;
  contentRaw_lt?: Maybe<String>;
  contentRaw_lte?: Maybe<String>;
  contentRaw_gt?: Maybe<String>;
  contentRaw_gte?: Maybe<String>;
  contentRaw_contains?: Maybe<String>;
  contentRaw_not_contains?: Maybe<String>;
  contentRaw_starts_with?: Maybe<String>;
  contentRaw_not_starts_with?: Maybe<String>;
  contentRaw_ends_with?: Maybe<String>;
  contentRaw_not_ends_with?: Maybe<String>;
  AND?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
  OR?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
  NOT?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface DiscussEdge {
  node: Discuss;
  cursor: String;
}

export interface DiscussEdgePromise extends Promise<DiscussEdge>, Fragmentable {
  node: <T = DiscussPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiscussEdgeSubscription
  extends Promise<AsyncIterator<DiscussEdge>>,
    Fragmentable {
  node: <T = DiscussSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DiscussPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  articleId: Int;
  contentRaw: String;
  content: String;
  userName?: String;
  userProfile?: String;
  userEmail: String;
  parentId?: String;
}

export interface DiscussPreviousValuesPromise
  extends Promise<DiscussPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  articleId: () => Promise<Int>;
  contentRaw: () => Promise<String>;
  content: () => Promise<String>;
  userName: () => Promise<String>;
  userProfile: () => Promise<String>;
  userEmail: () => Promise<String>;
  parentId: () => Promise<String>;
}

export interface DiscussPreviousValuesSubscription
  extends Promise<AsyncIterator<DiscussPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  articleId: () => Promise<AsyncIterator<Int>>;
  contentRaw: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  userProfile: () => Promise<AsyncIterator<String>>;
  userEmail: () => Promise<AsyncIterator<String>>;
  parentId: () => Promise<AsyncIterator<String>>;
}

export interface DiscussConnection {
  pageInfo: PageInfo;
  edges: DiscussEdge[];
}

export interface DiscussConnectionPromise
  extends Promise<DiscussConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiscussEdge>>() => T;
  aggregate: <T = AggregateDiscussPromise>() => T;
}

export interface DiscussConnectionSubscription
  extends Promise<AsyncIterator<DiscussConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiscussEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiscussSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Classify {
  id: Int;
  name: String;
  parent?: Int;
  parentList?: String;
  linkCount?: Int;
}

export interface ClassifyPromise extends Promise<Classify>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  parent: () => Promise<Int>;
  parentList: () => Promise<String>;
  linkCount: () => Promise<Int>;
}

export interface ClassifySubscription
  extends Promise<AsyncIterator<Classify>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<Int>>;
  parentList: () => Promise<AsyncIterator<String>>;
  linkCount: () => Promise<AsyncIterator<Int>>;
}

export interface ClassifyNullablePromise
  extends Promise<Classify | null>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  parent: () => Promise<Int>;
  parentList: () => Promise<String>;
  linkCount: () => Promise<Int>;
}

export interface ArticleConnection {
  pageInfo: PageInfo;
  edges: ArticleEdge[];
}

export interface ArticleConnectionPromise
  extends Promise<ArticleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleEdge>>() => T;
  aggregate: <T = AggregateArticlePromise>() => T;
}

export interface ArticleConnectionSubscription
  extends Promise<AsyncIterator<ArticleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Discuss {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  articleId: Int;
  contentRaw: String;
  content: String;
  userName?: String;
  userProfile?: String;
  userEmail: String;
  parentId?: String;
}

export interface DiscussPromise extends Promise<Discuss>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  articleId: () => Promise<Int>;
  contentRaw: () => Promise<String>;
  content: () => Promise<String>;
  userName: () => Promise<String>;
  userProfile: () => Promise<String>;
  userEmail: () => Promise<String>;
  parentId: () => Promise<String>;
}

export interface DiscussSubscription
  extends Promise<AsyncIterator<Discuss>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  articleId: () => Promise<AsyncIterator<Int>>;
  contentRaw: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  userProfile: () => Promise<AsyncIterator<String>>;
  userEmail: () => Promise<AsyncIterator<String>>;
  parentId: () => Promise<AsyncIterator<String>>;
}

export interface DiscussNullablePromise
  extends Promise<Discuss | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  articleId: () => Promise<Int>;
  contentRaw: () => Promise<String>;
  content: () => Promise<String>;
  userName: () => Promise<String>;
  userProfile: () => Promise<String>;
  userEmail: () => Promise<String>;
  parentId: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateArticle {
  count: Int;
}

export interface AggregateArticlePromise
  extends Promise<AggregateArticle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSubscription
  extends Promise<AsyncIterator<AggregateArticle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleSubscription>>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateClassify {
  count: Int;
}

export interface AggregateClassifyPromise
  extends Promise<AggregateClassify>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassifySubscription
  extends Promise<AsyncIterator<AggregateClassify>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagsEdge {
  node: Tags;
  cursor: String;
}

export interface TagsEdgePromise extends Promise<TagsEdge>, Fragmentable {
  node: <T = TagsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagsEdgeSubscription
  extends Promise<AsyncIterator<TagsEdge>>,
    Fragmentable {
  node: <T = TagsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Article {
  id: Int;
  type?: ArticleTypeEnum;
  profile?: String;
  title: String;
  content: String;
  contentRaw: String;
  tags?: Json;
}

export interface ArticlePromise extends Promise<Article>, Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<ArticleTypeEnum>;
  profile: () => Promise<String>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  contentRaw: () => Promise<String>;
  tags: () => Promise<Json>;
  classify: <T = ClassifyPromise>() => T;
}

export interface ArticleSubscription
  extends Promise<AsyncIterator<Article>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<ArticleTypeEnum>>;
  profile: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  contentRaw: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<Json>>;
  classify: <T = ClassifySubscription>() => T;
}

export interface ArticleNullablePromise
  extends Promise<Article | null>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<ArticleTypeEnum>;
  profile: () => Promise<String>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  contentRaw: () => Promise<String>;
  tags: () => Promise<Json>;
  classify: <T = ClassifyPromise>() => T;
}

export interface TagsSubscriptionPayload {
  mutation: MutationType;
  node: Tags;
  updatedFields: String[];
  previousValues: TagsPreviousValues;
}

export interface TagsSubscriptionPayloadPromise
  extends Promise<TagsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagsPreviousValuesPromise>() => T;
}

export interface TagsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagsPreviousValuesSubscription>() => T;
}

export interface ArticleSubscriptionPayload {
  mutation: MutationType;
  node: Article;
  updatedFields: String[];
  previousValues: ArticlePreviousValues;
}

export interface ArticleSubscriptionPayloadPromise
  extends Promise<ArticleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticlePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticlePreviousValuesPromise>() => T;
}

export interface ArticleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticlePreviousValuesSubscription>() => T;
}

export interface AggregateDiscuss {
  count: Int;
}

export interface AggregateDiscussPromise
  extends Promise<AggregateDiscuss>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiscussSubscription
  extends Promise<AsyncIterator<AggregateDiscuss>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArticlePreviousValues {
  id: Int;
  type?: ArticleTypeEnum;
  profile?: String;
  title: String;
  content: String;
  contentRaw: String;
  tags?: Json;
}

export interface ArticlePreviousValuesPromise
  extends Promise<ArticlePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  type: () => Promise<ArticleTypeEnum>;
  profile: () => Promise<String>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  contentRaw: () => Promise<String>;
  tags: () => Promise<Json>;
}

export interface ArticlePreviousValuesSubscription
  extends Promise<AsyncIterator<ArticlePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<ArticleTypeEnum>>;
  profile: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  contentRaw: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<Json>>;
}

export interface ArticleEdge {
  node: Article;
  cursor: String;
}

export interface ArticleEdgePromise extends Promise<ArticleEdge>, Fragmentable {
  node: <T = ArticlePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleEdgeSubscription
  extends Promise<AsyncIterator<ArticleEdge>>,
    Fragmentable {
  node: <T = ArticleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClassifyEdge {
  node: Classify;
  cursor: String;
}

export interface ClassifyEdgePromise
  extends Promise<ClassifyEdge>,
    Fragmentable {
  node: <T = ClassifyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassifyEdgeSubscription
  extends Promise<AsyncIterator<ClassifyEdge>>,
    Fragmentable {
  node: <T = ClassifySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TagsPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  linkCount?: Int;
}

export interface TagsPreviousValuesPromise
  extends Promise<TagsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  linkCount: () => Promise<Int>;
}

export interface TagsPreviousValuesSubscription
  extends Promise<AsyncIterator<TagsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  linkCount: () => Promise<AsyncIterator<Int>>;
}

export interface TagsConnection {
  pageInfo: PageInfo;
  edges: TagsEdge[];
}

export interface TagsConnectionPromise
  extends Promise<TagsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagsEdge>>() => T;
  aggregate: <T = AggregateTagsPromise>() => T;
}

export interface TagsConnectionSubscription
  extends Promise<AsyncIterator<TagsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagsSubscription>() => T;
}

export interface DiscussSubscriptionPayload {
  mutation: MutationType;
  node: Discuss;
  updatedFields: String[];
  previousValues: DiscussPreviousValues;
}

export interface DiscussSubscriptionPayloadPromise
  extends Promise<DiscussSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiscussPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiscussPreviousValuesPromise>() => T;
}

export interface DiscussSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiscussSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiscussSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiscussPreviousValuesSubscription>() => T;
}

export interface ClassifyConnection {
  pageInfo: PageInfo;
  edges: ClassifyEdge[];
}

export interface ClassifyConnectionPromise
  extends Promise<ClassifyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassifyEdge>>() => T;
  aggregate: <T = AggregateClassifyPromise>() => T;
}

export interface ClassifyConnectionSubscription
  extends Promise<AsyncIterator<ClassifyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassifyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassifySubscription>() => T;
}

export interface ClassifyPreviousValues {
  id: Int;
  name: String;
  parent?: Int;
  parentList?: String;
  linkCount?: Int;
}

export interface ClassifyPreviousValuesPromise
  extends Promise<ClassifyPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  parent: () => Promise<Int>;
  parentList: () => Promise<String>;
  linkCount: () => Promise<Int>;
}

export interface ClassifyPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassifyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<Int>>;
  parentList: () => Promise<AsyncIterator<String>>;
  linkCount: () => Promise<AsyncIterator<Int>>;
}

export interface ClassifySubscriptionPayload {
  mutation: MutationType;
  node: Classify;
  updatedFields: String[];
  previousValues: ClassifyPreviousValues;
}

export interface ClassifySubscriptionPayloadPromise
  extends Promise<ClassifySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassifyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassifyPreviousValuesPromise>() => T;
}

export interface ClassifySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassifySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassifySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassifyPreviousValuesSubscription>() => T;
}

export interface Tags {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  linkCount?: Int;
}

export interface TagsPromise extends Promise<Tags>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  linkCount: () => Promise<Int>;
}

export interface TagsSubscription
  extends Promise<AsyncIterator<Tags>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  linkCount: () => Promise<AsyncIterator<Int>>;
}

export interface TagsNullablePromise
  extends Promise<Tags | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  linkCount: () => Promise<Int>;
}

export interface AggregateTags {
  count: Int;
}

export interface AggregateTagsPromise
  extends Promise<AggregateTags>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagsSubscription
  extends Promise<AsyncIterator<AggregateTags>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Json = any;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Article",
    embedded: false
  },
  {
    name: "ArticleTypeEnum",
    embedded: false
  },
  {
    name: "Classify",
    embedded: false
  },
  {
    name: "Tags",
    embedded: false
  },
  {
    name: "Discuss",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://acmer.club:4466/blog`
});
export const prisma = new Prisma();
